// this file contains the spritesets used in the station grf
// including realsprites and recolour sprites
// defines
const NW = (0);
const NE = (1);
const SE = (2);
const SW = (3);
//* start of templates
#define X_SPRITE    (74)
#define Y_SPRITE    (74)
#define X_SIZE      (72)
#define Y_SIZE      (72)

template t_0(pos, name)         {[X_SPRITE*pos,0,X_SIZE,Y_SIZE,0,0,"gfx/"+name+".png"]} // childsprite template
template t_overhead(pos, name)  {[X_SPRITE*pos,0,X_SIZE,Y_SIZE,-35,-27,"gfx/"+name+".png"]} // overhead template
template t_full(pos, name)      {[X_SPRITE*pos,0,X_SIZE,Y_SIZE,-35,-37,"gfx/"+name+".png"]} // full template, also used for bufferstops
template t_platform_middle_x(name, pos, pos2) {[X_SPRITE*pos,Y_SPRITE*pos2,X_SIZE,Y_SIZE,-47,-43, "gfx/"+name+".png"]} // middle platform template, used for bufferstops
template t_platform_middle_y(name, pos, pos2) {[X_SPRITE*pos,Y_SPRITE*pos2,X_SIZE,Y_SIZE,-23,-43, "gfx/"+name+".png"]} // middle platform template, used for bufferstops

template t_overpass_x(name)     {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-45,-42,"gfx/"+name+".png"]}
template t_overpass_y(name)     {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-25,-42,"gfx/"+name+".png"]}

template t_corner_N(name)       {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-34,-36,"gfx/"+name+".png"]} // corner templates
template t_corner_E(name)       {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-34,-36,"gfx/"+name+".png"]}
template t_corner_S(name)       {[X_SPRITE*2,0,X_SIZE,Y_SIZE,-34,-36,"gfx/"+name+".png"]}
template t_corner_W(name)       {[X_SPRITE*3,0,X_SIZE,Y_SIZE,-34,-36,"gfx/"+name+".png"]}

template t_bufferstop_NW(name)  {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-23,-43,"gfx/"+name+".png"]} // bufferstop templates
template t_bufferstop_NE(name)  {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-47,-43,"gfx/"+name+".png"]}
template t_bufferstop_SE(name)  {[X_SPRITE*2,0,X_SIZE,Y_SIZE,-43,-53,"gfx/"+name+".png"]}
template t_bufferstop_SW(name)  {[X_SPRITE*3,0,X_SIZE,Y_SIZE,-27,-53,"gfx/"+name+".png"]}

template t_platform_NW(name)    {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-35,-37, NOCROP, "gfx/"+name+".png"]} // platform templates
template t_platform_NE(name)    {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-35,-37, NOCROP, "gfx/"+name+".png"]}
template t_platform_SE(name)    {[X_SPRITE*2,0,X_SIZE,Y_SIZE,-55,-47, NOCROP, "gfx/"+name+".png"]}
template t_platform_SW(name)    {[X_SPRITE*3,0,X_SIZE,Y_SIZE,-15,-47, NOCROP, "gfx/"+name+".png"]}

template t_platform_new_NW(pos, name)    {[X_SPRITE*0,Y_SPRITE*pos,X_SIZE,Y_SIZE,-35,-37, NOCROP, "gfx/"+name+".png"]} // platform templates
template t_platform_new_NE(pos, name)    {[X_SPRITE*1,Y_SPRITE*pos,X_SIZE,Y_SIZE,-35,-37, NOCROP, "gfx/"+name+".png"]}
template t_platform_new_SE(pos, name)    {[X_SPRITE*2,Y_SPRITE*pos,X_SIZE,Y_SIZE,-55,-47, NOCROP, "gfx/"+name+".png"]}
template t_platform_new_SW(pos, name)    {[X_SPRITE*3,Y_SPRITE*pos,X_SIZE,Y_SIZE,-15,-47, NOCROP, "gfx/"+name+".png"]}

template t_railyard_NW(name)    {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-37,-38, "gfx/"+name+".png"]} // railyard templates
template t_railyard_NE(name)    {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-33,-38, "gfx/"+name+".png"]}
template t_railyard_SE(name)    {[X_SPRITE*2,0,X_SIZE,Y_SIZE,-33,-36, "gfx/"+name+".png"]}
template t_railyard_SW(name)    {[X_SPRITE*3,0,X_SIZE,Y_SIZE,-37,-36, "gfx/"+name+".png"]}

template t_fence_NW(name)       {[X_SPRITE*0,0,X_SIZE,Y_SIZE,-35,-38,"gfx/"+name+".png"]} // fence templates
template t_fence_NE(name)       {[X_SPRITE*1,0,X_SIZE,Y_SIZE,-35,-38,"gfx/"+name+".png"]}
template t_fence_SE(name)       {[X_SPRITE*2,0,X_SIZE,Y_SIZE,-67,-53,"gfx/"+name+".png"]}
template t_fence_SW(name)       {[X_SPRITE*3,0,X_SIZE,Y_SIZE, -3,-53,"gfx/"+name+".png"]}

#undef X_SIZE
#undef Y_SIZE

//* start of miscellaneous spritesets
// here I have bufferstops, snow, random deco, and some other stuff
// for snow I'm going to use random recolouring and random sprites
// for simplicity, I'll put everything in one spriteset

const GROUP_BUFFERSTOP      = (0);
const GROUP_FENCE           = (GROUP_BUFFERSTOP + 1);
const GROUP_SHADOW_SHORT    = (GROUP_FENCE + 1);
const GROUP_SHADOW_LONG     = (GROUP_SHADOW_SHORT + 1);
const GROUP_FENCE_BARS      = (GROUP_SHADOW_LONG + 1);
const GROUP_MISC_RECOLOUR   = (GROUP_FENCE_BARS + 1);
// functions
#define SPRITE_PER_MISC_GRUOP (4)
#define GET_SPRITE_MISC(group, sprite) (group * SPRITE_PER_MISC_GRUOP + sprite)

spriteset(s_misc) {
    /* bufferstops */
    t_bufferstop_NW("misc/bufferstop")
    t_bufferstop_NE("misc/bufferstop")
    t_bufferstop_SE("misc/bufferstop")
    t_bufferstop_SW("misc/bufferstop")
    /* fences */
    t_fence_NW("misc/fence")
    t_fence_NE("misc/fence")
    t_fence_SE("misc/fence")
    t_fence_SW("misc/fence")
    /* short shadow */
    t_0         (0, "misc/shadow_short")
    t_0         (1, "misc/shadow_short")
    t_0         (2, "misc/shadow_short")
    t_0         (3, "misc/shadow_short")
    /* long shadow */
    t_0         (0, "misc/shadow_long")
    t_0         (1, "misc/shadow_long")
    t_0         (2, "misc/shadow_long")
    t_0         (3, "misc/shadow_long")
    /* fence bars */
    t_fence_NW("misc/fence_bars")
    t_fence_NE("misc/fence_bars")
    t_fence_SE("misc/fence_bars")
    t_fence_SW("misc/fence_bars")
    // misc recolour
    recolour_sprite{
        0x00..0xFF:0x00;
    }
}

//* start of shelter spritesets
// gruops
const GROUP_SHELTER_SYM = (0);
const GROUP_SHELTER_SYM_SNOW = (GROUP_SHELTER_SYM + 1);
const GROUP_RECOLOUR_SHELTER_ERA = (GROUP_SHELTER_SYM_SNOW + 1);
// functions
#define SPRITE_PER_SHELTER_GROUP 4
#define GET_SPRITE_SHELTER(group, sprite) (group * SPRITE_PER_SHELTER_GROUP + sprite)

spriteset(s_shelter_tiles) {
    /* sym shelters */
    #define S_SHELTER_SETUP(name) \
    NW_0:           t_0(0, "shelter/"+name+"_sym")\
    NE_0:           t_0(1, "shelter/"+name+"_sym")\
    SE_0:           t_0(2, "shelter/"+name+"_sym")\
    SW_0:           t_0(3, "shelter/"+name+"_sym")\
    /* shelter snow */
    #define S_SHELTER_SNOW_SETUP(name) \
    NW_0_snow:      t_0(4, "shelter/"+name+"_sym")\
    NE_0_snow:      t_0(5, "shelter/"+name+"_sym")\
    SE_0_snow:      t_0(6, "shelter/"+name+"_sym")\
    SW_0_snow:      t_0(7, "shelter/"+name+"_sym")\

    S_SHELTER_SETUP("shelter_tiles")
    S_SHELTER_SNOW_SETUP("shelter_tiles")
    /* recolouring, recolour from RNG? */
    recolour_sprite{
        179: 35;
        123: 36;
        112: 35;
        113: 36;
        106: 36;
        105: 34;
        104: 5;
        14:  5;
        13:  4;
        12:  3;
        10:  2;
        3:   6;
    }
    recolour_sprite{
        179: 113;
        123: 108;
        113: 112;
        112: 105;
        106: 112;
        105: 105;
        104: 104;
    }
    recolour_sprite{}
    recolour_sprite{} // placeholder
}

spriteset(s_shelter_metal) {
    S_SHELTER_SETUP("shelter_metal")
    S_SHELTER_SNOW_SETUP("shelter_metal")
    /* recolouring, recolour from RNG? */
    recolour_sprite{
        16..23: 104..111;
    }
    recolour_sprite{
        16..23: 32..39;
    }
    recolour_sprite{}
    recolour_sprite{} // placeholder
}

//* start of platform spritesets

// groups
const GROUP_SYM                       = (0);
const GROUP_ASYM_1                    = (GROUP_SYM + 1);
const GROUP_ASYM_2                    = (GROUP_ASYM_1 + 1);
const GROUP_SYM_EDGE                  = (GROUP_ASYM_2 + 1);
const GROUP_RECOLOUR_ERA              = (GROUP_SYM_EDGE + 1);
const GROUP_SNOW_SYM                  = (GROUP_RECOLOUR_ERA + 1);
const GROUP_SNOW_ASYM_1               = (GROUP_SNOW_SYM + 1);
const GROUP_SNOW_ASYM_2               = (GROUP_SNOW_ASYM_1 + 1);
const GROUP_SNOW_SYM_EDGE             = (GROUP_SNOW_ASYM_2 + 1);

// private zone?
const GROUP_OVERHEAD_STRUCTURE        = (GROUP_SNOW_SYM_EDGE + 1);
const GROUP_OVERHEAD_STRUCTURE_SNOW   = (GROUP_OVERHEAD_STRUCTURE + 1);

const GROUP_PLATFORM_RECOLOUR_ASPHALT = (GROUP_SNOW_SYM_EDGE + 1);
const GROUP_PLATFORM_RECOLOUR_BRICK   = (GROUP_PLATFORM_RECOLOUR_ASPHALT + 1);
const GROUP_PLATFORM_RECOLOUR_WOOD    = (GROUP_PLATFORM_RECOLOUR_BRICK + 1);

const GROUP_CORNER_HOUSE              = (GROUP_SNOW_SYM_EDGE + 1);
const GROUP_CORNER_HOUSE_SNOW         = (GROUP_CORNER_HOUSE + 1);
const GROUP_CORNER_HOUSE_RECOLOUR     = (GROUP_CORNER_HOUSE_SNOW + 1);

const GROUP_OVERPASS                  = (GROUP_SNOW_SYM_EDGE + 1); // bruh
const GROUP_OVERPASS_SHADOW           = (GROUP_OVERPASS + 1);

const GROUP_BUFFER_FILLED_ASYM_1      = (GROUP_SYM_EDGE + 1);
const GROUP_BUFFER_FILLED_ASYM_2      = (GROUP_BUFFER_FILLED_ASYM_1 + 1);
const GROUP_BUFFER_FILLED_SYM_1       = (GROUP_BUFFER_FILLED_ASYM_2 + 1);
const GROUP_BUFFER_FILLED_SYM_2       = (GROUP_BUFFER_FILLED_SYM_1 + 1);
const GROUP_BUFFER_MIDDLE_SYM         = (GROUP_BUFFER_FILLED_SYM_2 + 1);
const GROUP_BUFFER_MIDDLE_ASYM_1      = (GROUP_BUFFER_MIDDLE_SYM + 1);
const GROUP_BUFFER_MIDDLE_ASYM_2      = (GROUP_BUFFER_MIDDLE_ASYM_1 + 1);

// functions
#define SPRITE_PER_PLATFORM_GROUP 4
#define GET_SPRITE(group, sprite)\
    (group * SPRITE_PER_PLATFORM_GROUP + sprite)
/*
There goes with two pointers: group pointer and sprite pointer
the group pointer points out the platform group, say, is it sym or
asym1 or asym2. The sprite pointer points out the sprite in the group,
say, is it NW or NE or SE or SW.

Here we use multiplication to tell the group and sprite apart.
Recoloursprites are special and should be handled separately.
*/

spriteset(s_platform_cement) {
    #define S_PLATFORM_SETUP(name) \
    t_platform_NW(name+"_sym")\
    t_platform_NE(name+"_sym")\
    t_platform_SE(name+"_sym")\
    t_platform_SW(name+"_sym")\
    /* asym platforms 1 */\
    t_platform_NW(name+"_asym_1")\
    t_platform_NE(name+"_asym_1")\
    t_platform_SE(name+"_asym_1")\
    t_platform_SW(name+"_asym_1")\
    /* asym platforms 2 */\
    t_platform_NW(name+"_asym_2")\
    t_platform_NE(name+"_asym_2")\
    t_platform_SE(name+"_asym_2")\
    t_platform_SW(name+"_asym_2")\
    /* sym edge platforms */\
    t_platform_NW(name+"_sym_edge")\
    t_platform_NE(name+"_sym_edge")\
    t_platform_SE(name+"_sym_edge")\
    t_platform_SW(name+"_sym_edge")

    #define S_PLATFORM_SETUP_NEW(a,b,c,d,name) \
    t_platform_new_NW(a, name)\
    t_platform_new_NE(a, name)\
    t_platform_new_SE(a, name)\
    t_platform_new_SW(a, name)\
    /* asym platforms 1 */\
    t_platform_new_NW(b, name)\
    t_platform_new_NE(b, name)\
    t_platform_new_SE(b, name)\
    t_platform_new_SW(b, name)\
    /* asym platforms 2 */\
    t_platform_new_NW(c, name)\
    t_platform_new_NE(c, name)\
    t_platform_new_SE(c, name)\
    t_platform_new_SW(c, name)\
    /* sym edge platforms */\
    t_platform_new_NW(d, name)\
    t_platform_new_NE(d, name)\
    t_platform_new_SE(d, name)\
    t_platform_new_SW(d, name)

    S_PLATFORM_SETUP_NEW(0,1,2,3,"platform/real")
    /* recolouring, recolour from RNG? */
    ${recolour_cement}
    recolour_sprite{} // placeholder
    /* snow */
    #define S_PLATFORM_SNOW_SETUP(name) \
    t_0(0, name+"_snow_sym") \
    t_0(1, name+"_snow_sym") \
    t_0(2, name+"_snow_sym") \
    t_0(3, name+"_snow_sym") \
    /* snow */ \
    t_0(0, name+"_snow_asym_1") \
    t_0(1, name+"_snow_asym_1") \
    t_0(2, name+"_snow_asym_1") \
    t_0(3, name+"_snow_asym_1") \
    /* snow */ \
    t_0(0, name+"_snow_asym_2") \
    t_0(1, name+"_snow_asym_2") \
    t_0(2, name+"_snow_asym_2") \
    t_0(3, name+"_snow_asym_2") \
    /* snow */ \
    t_0(0, name+"_snow_sym_edge") \
    t_0(1, name+"_snow_sym_edge") \
    t_0(2, name+"_snow_sym_edge") \
    t_0(3, name+"_snow_sym_edge")

    S_PLATFORM_SNOW_SETUP("platform/real")

    //alsphalt
    ${recolour_asphalt}
    recolour_sprite{} // placeholder
    // tiles
    ${recolour_tiles}
    recolour_sprite{} // placeholder
    // wood
    ${recolour_wood}
    recolour_sprite{} // placeholder
}

spriteset(s_platform_alt) {
    S_PLATFORM_SETUP("platform/alt")
    /* recolouring, recolour from RNG? */
    recolour_sprite{
        0x40: 0x07;
        0x41: 0x08;
        0x42: 0x08;
    }
    recolour_sprite{
        0x40: 0x0B;
        0x41: 0x0C;
        0x42: 0x0D;
    }
    recolour_sprite{}
    recolour_sprite{} // placeholder
    /* snow */
    S_PLATFORM_SNOW_SETUP("platform/real")

    recolour_sprite{
        0x40: 16;
        0x41: 17;
        0x42: 17;
        7:  16;
        8:  17;
        9:  18;
        10: 19;
    }
    recolour_sprite{
        0x40: 21;
        0x41: 22;
        0x42: 23;
        7:  16;
        8:  17;
        9:  18;
        10: 19;
    }
    recolour_sprite{
        0x40: 0x40;
        0x41: 0x41;
        0x42: 0x42;
        7:  16;
        8:  17;
        9:  18;
        10: 19;
    }
    recolour_sprite{} // placeholder
    /* group 2 */
    recolour_sprite{
        0x40: 57;
        0x41: 58;
        0x42: 58;
        7:  56;
        8:  57;
        9:  58;
        10: 38;
    }
    recolour_sprite{
        0x40: 57;
        0x41: 58;
        0x42: 0x0D;
        7:  56;
        8:  57;
        9:  58;
        10: 38;
    }
    recolour_sprite{
        0x40: 37;
        0x41: 38;
        0x42: 39;
        7:  56;
        8:  57;
        9:  58;
        10: 38;
    }
    recolour_sprite{} // placeholder
}

spriteset(s_platform_cement_crossing) {
    #define S_CORNER_HOUSE_SETUP(name) \
    t_corner_N(name+"_corner_house") \
    t_corner_E(name+"_corner_house") \
    t_corner_S(name+"_corner_house") \
    t_corner_W(name+"_corner_house")
    #define S_CORNER_HOUSE_SNOW_SETUP(name) \
    t_corner_N(name+"_corner_house_snow") \
    t_corner_E(name+"_corner_house_snow") \
    t_corner_S(name+"_corner_house_snow") \
    t_corner_W(name+"_corner_house_snow")

    S_PLATFORM_SETUP_NEW(4,5,6,7,"platform/real")
    /* recolouring, recolour from RNG? */
    recolour_sprite{
        0x40: 0x07;
        0x41: 0x08;
        0x42: 0x08;
    }
    recolour_sprite{
        0x40: 0x0B;
        0x41: 0x0C;
        0x42: 0x0D;
    }
    recolour_sprite{}
    recolour_sprite{} // placeholder
    /* snow */
    S_PLATFORM_SNOW_SETUP       ("crossing/real")
    S_CORNER_HOUSE_SETUP        ("crossing/real")
    S_CORNER_HOUSE_SNOW_SETUP   ("crossing/real")
    // recolouring for corner houses
    recolour_sprite{
        3:3;
        4:4;
        5:5;
        6:6;
        7:7;
        8:8;
        9:9;
        10:10;
        53:53;
        54:54;
        55:55;
        104:104;
        105:105;
        107:107;
        108:108;
        109:109;
    }
    recolour_sprite{
        3:154;
        4:155;
        5:156;
        6:157;
        7:158;
        8:159;
        9:160;
        10:161;
        53:5;
        54:6;
        55:7;
        104:16;
        105:17;
        107:18;
        108:19;
        109:20;
    }
    recolour_sprite{
        3:96;
        4:97;
        5:98;
        6:99;
        7:100;
        8:101;
        9:102;
        10:103;
        53:5;
        54:6;
        55:7;
        104:16;
        105:17;
        107:18;
        108:19;
        109:20;
    }
    recolour_sprite{}
}

spriteset(s_platform_overpass_real) {
    S_PLATFORM_SETUP("overpass/real")
    /* recolouring, recolour from RNG? */
    recolour_sprite{
        0x40: 0x07;
        0x41: 0x08;
        0x42: 0x08;
        98:104;
        99:2;
        100:3;
        101:3;
        102:7;
        103:5;
    }
    recolour_sprite{
        0x40: 0x0B;
        0x41: 0x0C;
        0x42: 0x0D;
        98:71;
        99:112;
        100:113;
        101:113;
        102:35;
        103:114;
    }
    recolour_sprite{}
    recolour_sprite{} // placeholder
    /* snow */
    S_PLATFORM_SNOW_SETUP("overpass/real")
    #define S_OVERPASS_SETUP(name) \
    t_overpass_x(   name+"_overpass") \
    t_overpass_y(   name+"_overpass") \
    t_0         (2, name+"_overpass") \
    t_0         (3, name+"_overpass")

    S_OVERPASS_SETUP("overpass/real")
}

spriteset(s_overpass_station) {
    S_PLATFORM_SETUP("overpass/station")
    /* recolouring, recolour from RNG? */
    recolour_sprite{}
    recolour_sprite{}
    recolour_sprite{}
    recolour_sprite{} // placeholder
    /* snow */
    S_PLATFORM_SNOW_SETUP("overpass/real") //TODO change to overpass/station
    S_OVERPASS_SETUP("overpass/station")
}

spriteset (s_modular_low_overpass) {
    S_PLATFORM_SETUP("modular/low_overpass")
    recolour_sprite{}
    recolour_sprite{}
    recolour_sprite{}
    recolour_sprite{}
    S_PLATFORM_SNOW_SETUP("modular/low_overpass")
    #define S_PLATFORM_OVERHEAD_STRUCTURE_SETUP(name) \
    t_overhead(0, name+"_overhead") \
    t_overhead(1, name+"_overhead") \
    t_overhead(2, name+"_overhead") \
    t_overhead(3, name+"_overhead")

    #define S_PLATFORM_OVERHEAD_STRUCTURE_SNOW_SETUP(name) \
    t_0(0, name+"_snow_overhead") \
    t_0(1, name+"_snow_overhead") \
    t_0(2, name+"_snow_overhead") \
    t_0(3, name+"_snow_overhead") \

    S_PLATFORM_OVERHEAD_STRUCTURE_SETUP("modular/low_overpass")
    S_PLATFORM_OVERHEAD_STRUCTURE_SNOW_SETUP("modular/low_overpass")
}
// start of waiting cargo sprites
// dummy spriteset, urgh why do I have to do this
spriteset(s_dummy) {
    [0,0,1,1,0,0,"gfx/misc/bufferstop.png"]
    [0,0,1,1,0,0,"gfx/misc/bufferstop.png"]
    [0,0,1,1,0,0,"gfx/misc/bufferstop.png"]
    [0,0,1,1,0,0,"gfx/misc/bufferstop.png"]
}
// platform cargo
spriteset(s_cargo_passenger_few) {
    t_0(0, "misc/waiting_people_few")
    t_0(1, "misc/waiting_people_few")
    t_0(2, "misc/waiting_people_few")
    t_0(3, "misc/waiting_people_few")
}

spriteset(s_cargo_passenger_little) {
    t_0(0, "misc/waiting_people_little")
    t_0(1, "misc/waiting_people_little")
    t_0(2, "misc/waiting_people_little")
    t_0(3, "misc/waiting_people_little")
}

spriteset(s_cargo_passenger_lots) {
    t_0(0, "misc/waiting_people_lots")
    t_0(1, "misc/waiting_people_lots")
    t_0(2, "misc/waiting_people_lots")
    t_0(3, "misc/waiting_people_lots")
}

/* we deploy the ISR trick here, basically we have a bunch of spritegroups and we just let the station randomly choose them
 * the random trigger is when there is new cargo waiting at the staiton
 * and the cargothreshold will also be copied from ISR, 0x0384 :-)
 */

spritegroup sg_cargo_passenger_0 {
    little: [s_dummy, s_dummy, s_dummy, s_dummy,
             s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few,
             s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little,];
    lots:   [s_cargo_passenger_little];
}

spritegroup sg_cargo_passenger_1 {
    little: [s_dummy, s_dummy, s_dummy,
             s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few,
             s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little,
             s_cargo_passenger_lots];
    lots:   [s_cargo_passenger_lots];
}

spritegroup sg_cargo_passenger_2 {
    little: [s_dummy, s_dummy,
             s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few,
             s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little,
             s_cargo_passenger_lots, s_cargo_passenger_lots];
    lots:   [s_cargo_passenger_lots];
}

spritegroup sg_cargo_passenger_3 {
    little: [s_dummy,
             s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few, s_cargo_passenger_few,
             s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little, s_cargo_passenger_little,
             s_cargo_passenger_lots, s_cargo_passenger_lots, s_cargo_passenger_lots];
    lots:   [s_cargo_passenger_lots];
}

//! The second argument here must be TILE, else it would not work

random_switch (FEAT_STATIONS, TILE, rsw_cargo_passenger, bitmask(TRIGGER_STATION_NEW_CARGO, TRIGGER_STATION_NO_MORE_CARGO)){
    1: sg_cargo_passenger_0;
    1: sg_cargo_passenger_1;
    1: sg_cargo_passenger_2;
    1: sg_cargo_passenger_3;
}

spriteset(s_cargo_boxes_few) {
    t_0(0, "misc/waiting_boxes_few")
    t_0(1, "misc/waiting_boxes_few")
    t_0(2, "misc/waiting_boxes_few")
    t_0(3, "misc/waiting_boxes_few")
}

spriteset(s_cargo_boxes_little) {
    t_0(0, "misc/waiting_boxes_little")
    t_0(1, "misc/waiting_boxes_little")
    t_0(2, "misc/waiting_boxes_little")
    t_0(3, "misc/waiting_boxes_little")
}

spriteset(s_cargo_boxes_lots) {
    t_0(0, "misc/waiting_boxes_lots")
    t_0(1, "misc/waiting_boxes_lots")
    t_0(2, "misc/waiting_boxes_lots")
    t_0(3, "misc/waiting_boxes_lots")
}

spritegroup sg_cargo_boxes_0 {
    little: [s_dummy, s_dummy, s_dummy, s_dummy,
             s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few,
             s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little,];
    lots:   [s_cargo_boxes_lots];
}

spritegroup sg_cargo_boxes_1 {
    little: [s_dummy, s_dummy, s_dummy,
             s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few,
             s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little,
             s_cargo_boxes_lots];
    lots:   [s_cargo_boxes_lots];
}

spritegroup sg_cargo_boxes_2 {
    little: [s_dummy, s_dummy,
             s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few,
             s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little,
             s_cargo_boxes_lots, s_cargo_boxes_lots];
    lots:   [s_cargo_boxes_lots];
}

spritegroup sg_cargo_boxes_3 {
    little: [s_dummy,
             s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few, s_cargo_boxes_few,
             s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little, s_cargo_boxes_little,
             s_cargo_boxes_lots, s_cargo_boxes_lots, s_cargo_boxes_lots];
    lots:   [s_cargo_boxes_lots];
}

random_switch (FEAT_STATIONS, TILE, rsw_cargo_boxes, bitmask(TRIGGER_STATION_NEW_CARGO, TRIGGER_STATION_NO_MORE_CARGO)){
    1: sg_cargo_boxes_0;
    1: sg_cargo_boxes_1;
    1: sg_cargo_boxes_2;
    1: sg_cargo_boxes_3;
}


spriteset (s_railyard_tracks) {
    #define S_RAILYARD_SETUP(name) \
    t_railyard_NW(name+"_sym")\
    t_railyard_NE(name+"_sym")\
    t_railyard_SE(name+"_sym")\
    t_railyard_SW(name+"_sym")\
    /* asym railyards 1 */\
    t_railyard_NW(name+"_asym_1")\
    t_railyard_NE(name+"_asym_1")\
    t_railyard_SE(name+"_asym_1")\
    t_railyard_SW(name+"_asym_1")\
    /* asym railyards 2 */\
    t_railyard_NW(name+"_asym_2")\
    t_railyard_NE(name+"_asym_2")\
    t_railyard_SE(name+"_asym_2")\
    t_railyard_SW(name+"_asym_2")\
    /* sym edge railyards */\
    t_railyard_NW(name+"_sym_edge")\
    t_railyard_NE(name+"_sym_edge")\
    t_railyard_SE(name+"_sym_edge")\
    t_railyard_SW(name+"_sym_edge")

    S_RAILYARD_SETUP("railyard/track")
}

spriteset (s_buffer_real) {
    #define S_PLATFORM_BUFFER_SETUP(a,b,c,d,e,f,g,name) \
    /* asym platforms 1 */\
    t_platform_new_NW(a,name)\
    t_platform_new_NE(a,name)\
    t_platform_new_SE(a,name)\
    t_platform_new_SW(a,name)\
    /* asym platforms 2 */\
    t_platform_new_NW(b,name)\
    t_platform_new_NE(b,name)\
    t_platform_new_SE(b,name)\
    t_platform_new_SW(b,name)\
    /* sym edge platforms */\
    t_platform_new_NW(c,name)\
    t_platform_new_NE(c,name)\
    t_platform_new_SE(c,name)\
    t_platform_new_SW(c,name)\
    /* sym edge platforms */\
    t_platform_new_NW(d,name)\
    t_platform_new_NE(d,name)\
    t_platform_new_SE(d,name)\
    t_platform_new_SW(d,name)\
    /* middle pieces */\
    t_platform_middle_x(name, 0, e)\
    t_platform_middle_y(name, 1, e)\
    t_platform_middle_x(name, 2, e)\
    t_platform_middle_y(name, 3, e)\
\
    t_platform_middle_x(name, 0, f)\
    t_platform_middle_y(name, 1, f)\
    t_platform_middle_x(name, 2, f)\
    t_platform_middle_y(name, 3, f)\
\
    t_platform_middle_x(name, 0, g)\
    t_platform_middle_y(name, 1, g)\
    t_platform_middle_x(name, 2, g)\
    t_platform_middle_y(name, 3, g)\


    S_PLATFORM_SETUP_NEW(8,9,10,11,"platform/real")
    S_PLATFORM_BUFFER_SETUP(12,13,14,15,16,17,18,"platform/real")
}

// buildings, they have different rules!
