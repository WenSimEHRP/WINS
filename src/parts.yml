---
# temporary registers are automatically sorted and assigned
temps:
  t_underlay: sw_fence_underlay()
  t_fence: sw_fence()
  t_barrier: sw_barrier()

# rail underlay
rail:
  ground:
    x: >
      ground { sprite: GROUNDSPRITE_RAIL_X; }
    y: >
      ground { sprite: GROUNDSPRITE_RAIL_Y; }

# fence grass underlay
underlay:
  left:
    x: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 0);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_left);
      }
    y: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 1);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_left);
      }
  right:
    x: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 2);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_right);
      }
    y: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 3);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_right);
      }
  front:
    x: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 1);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_front);
      }
    y: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 0);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_front);
      }
  back:
    x: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 3);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_back);
      }
    y: >
      childsprite {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_underlay), pos_end, 8) * 4 + pos_underlay_start + 2);
        hide_sprite: getbits(LOAD_TEMP(t_underlay), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_underlay), pos_back);
      }

# fence
fence:
  left:
    x: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2);
        xextent: 16;
        yextent: 0;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_left);
      }
    y: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2 + 1);
        xextent: 0;
        yextent: 16;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_left);
      }
  right:
    x: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2);
        xextent: 16;
        yoffset: 16;
        yextent: 0;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_right);
      }
    y: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2 + 1);
        xextent: 0;
        xoffset: 16;
        yextent: 16;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_right);
      }
  front:
    x: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2 + 1);
        xextent: 0;
        yextent: 16;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_front);
      }
    y: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2);
        xextent: 16;
        yextent: 0;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_front);
      }
  back:
    x: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2 + 1);
        xextent: 0;
        xoffset: 16;
        yextent: 16;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_back);
      }
    y: >
      building {
        sprite: CUSTOM(0, getbits(LOAD_TEMP(t_fence), pos_end, 8) * 2);
        xextent: 16;
        yoffset: 16;
        yextent: 0;
        zextent: 4;
        hide_sprite: getbits(LOAD_TEMP(t_fence), pos_end, 8) == none_code || hasbit(LOAD_TEMP(t_fence), pos_back);
      }

barrier:
  front:
    x: >
      building {
        sprite: CUSTOM(0, pos_barrier_start + 1);
        xextent: 6;
        yextent: 4;
        zextent: 6;
        yoffset: 6;
        hide_sprite: hasbit(LOAD_TEMP(t_barrier), pos_front);
      }
    y: >
      building {
        sprite: CUSTOM(0, pos_barrier_start + 0);
        xextent: 4;
        yextent: 6;
        zextent: 6;
        xoffset: 6;
        hide_sprite: hasbit(LOAD_TEMP(t_barrier), pos_front);
      }
  back:
    x: >
      building {
        sprite: CUSTOM(0, pos_barrier_start + 3);
        xextent: 6;
        yextent: 4;
        xoffset: 10;
        zextent: 6;
        yoffset: 6;
        hide_sprite: hasbit(LOAD_TEMP(t_barrier), pos_back);
      }
    y: >
      building {
        sprite: CUSTOM(0, pos_barrier_start + 2);
        xextent: 4;
        yextent: 6;
        yoffset: 10;
        zextent: 6;
        xoffset: 6;
        hide_sprite: hasbit(LOAD_TEMP(t_barrier), pos_back);
      }
