// fence parameters, from JP+ Tracks
const param_fence_offset = 26;
const param_fence_old = 0;
const param_fence_narrow_1 = 1;
const param_fence_narrow_2 = 2;
const param_fence_narrow_3 = 3;
const param_fence_standard_1 = 4;
const param_fence_standard_2 = 5;
const param_fence_standard_3 = 6;
const param_fence_shinkansen_1 = 7;
const param_fence_shinkansen_2 = 8;
const param_fence_ind = 9;

// fences under tropical, temperate, and snowy climates
switch(FEAT_STATIONS, SELF, _sw_fence_query_railtype, track_type){
    // param_fence_old
    RAIL: LOAD_TEMP(param_fence_old);
    NAAN: LOAD_TEMP(param_fence_old);
    // param_fence_narrow_1
    NAAA: LOAD_TEMP(param_fence_narrow_1);
    NAAE: LOAD_TEMP(param_fence_narrow_1);
    NAAD: LOAD_TEMP(param_fence_narrow_1);
    NBAN: LOAD_TEMP(param_fence_narrow_1);
    // param_fence_narrow_2
    NBAE: LOAD_TEMP(param_fence_narrow_2);
    NBAA: LOAD_TEMP(param_fence_narrow_2);
    NCAN: LOAD_TEMP(param_fence_narrow_2);
    NBAD: LOAD_TEMP(param_fence_narrow_2);
    // param_fence_narrow_3
    NCAE: LOAD_TEMP(param_fence_narrow_3);
    NDAN: LOAD_TEMP(param_fence_narrow_3);
    NCAD: LOAD_TEMP(param_fence_narrow_3);
    NCAA: LOAD_TEMP(param_fence_narrow_3);
    // param_fence_standard_1
    dAAN: LOAD_TEMP(param_fence_standard_1);
    SAAA: LOAD_TEMP(param_fence_standard_1);
    ELRL: LOAD_TEMP(param_fence_standard_1);
    SAAN: LOAD_TEMP(param_fence_standard_1);
    SAAD: LOAD_TEMP(param_fence_standard_1);
    sAAD: LOAD_TEMP(param_fence_standard_1);
    // param_fence_standard_2
    SBAE: LOAD_TEMP(param_fence_standard_2);
    SBAN: LOAD_TEMP(param_fence_standard_2);
    SBAA: LOAD_TEMP(param_fence_standard_2);
    SAA3: LOAD_TEMP(param_fence_standard_2);
    SBAD: LOAD_TEMP(param_fence_standard_2);
    dAAE: LOAD_TEMP(param_fence_standard_2);
    sBAD: LOAD_TEMP(param_fence_standard_2);
    // param_fence_standard_3
    sCAD: LOAD_TEMP(param_fence_standard_3);
    SCAE: LOAD_TEMP(param_fence_standard_3);
    dBAE: LOAD_TEMP(param_fence_standard_3);
    SCAN: LOAD_TEMP(param_fence_standard_3);
    SBA3: LOAD_TEMP(param_fence_standard_3);
    SCAD: LOAD_TEMP(param_fence_standard_3);
    SCAA: LOAD_TEMP(param_fence_standard_3);
    // param_fence_shinkansen_1
    SGAA: LOAD_TEMP(param_fence_shinkansen_1);
    // param_fence_shinkansen_2
    SHAA: LOAD_TEMP(param_fence_shinkansen_2);
    // param_fence_ind
    SGAN: LOAD_TEMP(param_fence_ind);
    SGAE: LOAD_TEMP(param_fence_ind);
    SFAN: LOAD_TEMP(param_fence_ind);
    SFAE: LOAD_TEMP(param_fence_ind);
    SDAN: LOAD_TEMP(param_fence_ind);
    SDAE: LOAD_TEMP(param_fence_ind);
    SEAN: LOAD_TEMP(param_fence_ind);
    SEAE: LOAD_TEMP(param_fence_ind);
    NHAN: LOAD_TEMP(param_fence_ind);
    NHAE: LOAD_TEMP(param_fence_ind);
    NGAN: LOAD_TEMP(param_fence_ind);
    NGAE: LOAD_TEMP(param_fence_ind);
    NEAE: LOAD_TEMP(param_fence_ind);
    NEAN: LOAD_TEMP(param_fence_ind);
    NFAN: LOAD_TEMP(param_fence_ind);
    NFAE: LOAD_TEMP(param_fence_ind);
    // some tracks return a constant
    SAAI: 4;
    SBAI: 6;
    MGLV: 6;
    default: param_fences_default;
}

switch(FEAT_STATIONS, SELF, _sw_fence, [
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_old], param_fence_old),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_1], param_fence_narrow_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_2], param_fence_narrow_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_3], param_fence_narrow_3),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_1], param_fence_standard_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_2], param_fence_standard_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_3], param_fence_standard_3),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_shinkansen_1], param_fence_shinkansen_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_shinkansen_2], param_fence_shinkansen_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_ind], param_fence_ind),
    _sw_fence_query_railtype(),
]){
    1: id_fence_hedge;
    2: id_fence_wooden;
    3: id_fence_wooden_white;
    4: id_fence_mesh;
    5: id_fence_mesh_low;
    6: id_fence_concrete;
    7: id_fence_concrete_2;
    none_code;
}

switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_temperate, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_temperate;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_arctic, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_arctic;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_tropical, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_tropical;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_temperate, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_temperate;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_arctic, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_arctic;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_tropical, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_tropical;
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx, climate){
    CLIMATE_ARCTIC: _sw_underlay_ogfx_arctic();
    CLIMATE_TROPICAL: _sw_underlay_ogfx_tropical();
    _sw_underlay_ogfx_temperate();
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx2_check_param, a, a){
    1: _sw_underlay_ogfx2_tropical();
    2: _sw_underlay_ogfx2_arctic();
    _sw_underlay_ogfx2_temperate();
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx2, climate){
    CLIMATE_ARCTIC:   _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]);
    CLIMATE_TROPICAL: _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]);
                      _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]); // no toyland, sorrey!
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_automatic,
    grf_order_behind("\4f\47\2b\34") ? 1 : // OpenGFX+ Landscape
    grf_order_behind("\6f\67\66\78") ? 0 : // OpenGFX2
    grf_order_behind("\4f\47\46\58") ? 1 : // OpenGFX
    0
) {
    1: _sw_fence_underlay_ogfx();
    _sw_fence_underlay_ogfx2();
}

// check fence underlay
switch(FEAT_STATIONS, SELF, _sw_fence_underlay, param_fences_underlay) {
    1: _sw_fence_underlay_automatic();
    2:  param["YZ\AA\02", 25] == 0 ?
            none_code :
        param["YZ\AA\02", 24] == 0 ?
            _sw_underlay_ogfx2_temperate() :
            _sw_underlay_ogfx2_tropical();
    3: _sw_underlay_ogfx2_temperate();
    4: _sw_underlay_ogfx2_arctic();
    5: _sw_underlay_ogfx2_tropical();
    6: _sw_underlay_ogfx_temperate();
    7: _sw_underlay_ogfx_arctic();
    8: _sw_underlay_ogfx_tropical();
    none_code;
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_check_tile_class, a, a){
    TILE_CLASS_RAIL: 1;
    TILE_CLASS_STATION: 1;
    0;
}

switch(FEAT_STATIONS, SELF, _sw_no_underlay, a, a){
    id_fence_concrete: 1;
    id_fence_concrete_2: 1;
    0;
}

switch(FEAT_STATIONS, SELF, _sw_is_deco_railtype, track_type){
    JEC0: 1;
    JEC1: 1;
    JEC2: 1;
    JEC3: 1;
    JEC4: 1;
    JEC5: 1;
    JEC6: 1;
    JEC7: 1;
    JEC8: 1;
    0;
}

const pos_underlay_type = 4;
const pos_underlay_type_size = 8;

// Returns a 12 bit value representing the fence type and underlay type
// aaaaaaaa bbbb
// a: fence type
// b: nearby rail/station information
// returns (none_code << pos_end) | (extra bits) if there are no underlay to show
// that is, 0b11111111 XXXX where XXXX doesn't matter
switch(FEAT_STATIONS, SELF, sw_fence_underlay,
    (hasbit(rail_continuation, 1) || _sw_fence_underlay_check_tile_class(nearby_tile_class(-1, 0))) << pos_front |
    (hasbit(rail_continuation, 0) || _sw_fence_underlay_check_tile_class(nearby_tile_class( 1, 0))) << pos_back |
    (_sw_fence_underlay_check_tile_class(nearby_tile_class(0,  1)) && nearby_tile_slope(0,0) != SLOPE_NW) << pos_right |
    (_sw_fence_underlay_check_tile_class(nearby_tile_class(0, -1)) && nearby_tile_slope(0,0) != SLOPE_SE) << pos_left |
    (_sw_no_underlay(_sw_fence()) ? none_code : _sw_fence_underlay()) << pos_underlay_type
){return;}

const pos_fence_type = 4;
const pos_fence_type_size = 8;

// Returns a 12 bit value representing the fence type
// aaaaaaaa bbbb
// a: fence type
// b: nearby rail/station information
// returns (none_code << pos_end) | (extra bits) if there are no underlay to show
// that is, 0b11111111 XXXX where XXXX doesn't matter
switch(FEAT_STATIONS, SELF, sw_fence,
    (hasbit(rail_continuation, 1) || _sw_fence_underlay_check_tile_class(nearby_tile_class(-1, 0))) << pos_front |
    (hasbit(rail_continuation, 0) || _sw_fence_underlay_check_tile_class(nearby_tile_class( 1, 0))) << pos_back |
    (_sw_fence_underlay_check_tile_class(nearby_tile_class(0,  1)) && nearby_tile_slope(0,0) != SLOPE_NW) << pos_right |
    (_sw_fence_underlay_check_tile_class(nearby_tile_class(0, -1)) && nearby_tile_slope(0,0) != SLOPE_SE) << pos_left |
    _sw_fence() << pos_fence_type
){return;}

const none_barrier = FILLED(2);

// Returns a 2 bit value
// aa
// a: nearby rail/station information
switch(FEAT_STATIONS, SELF, sw_barrier,
    _sw_is_deco_railtype() ? none_barrier : // don't show for deco railtypes
    hasbit(rail_continuation, 1) << pos_front |
    hasbit(rail_continuation, 0) << pos_back
){return;}
