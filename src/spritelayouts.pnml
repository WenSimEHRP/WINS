// tile defines

/*
On x direction

         N
       2 4 0
     W 6 8 7 E
       1 5 3
         S

On y direction

         N
       0 4 2
     W 7 8 6 E
       3 5 1
         S

*/

const TILE_SELF  = 8;
// on x directions, these shouldn't be modified
const TILE_X_NE  = 0;
const TILE_X_SW  = 1;
const TILE_X_NW  = 2;
const TILE_X_SE  = 3;
const TILE_X_N   = 4;
const TILE_X_S   = 5;
const TILE_X_W   = 6;
const TILE_X_E   = 7;

// orientations
#define ORI_X_NE -1, 0
#define ORI_X_SW  1, 0
#define ORI_X_NW  0,-1
#define ORI_X_SE  0, 1
#define ORI_X_N  -1,-1
#define ORI_X_S   1, 1
#define ORI_X_W   1,-1
#define ORI_X_E  -1, 1
#define ORI_SELF  0, 0

// on y direction
const TILE_Y_NW  = TILE_X_NE;
const TILE_Y_SE  = TILE_X_SW;
const TILE_Y_NE  = TILE_X_NW;
const TILE_Y_SW  = TILE_X_SE;
const TILE_Y_N   = TILE_X_N;
const TILE_Y_S   = TILE_X_S;
const TILE_Y_E   = TILE_X_W;
const TILE_Y_W   = TILE_X_E;

#define ORI_Y_NW ORI_X_NE
#define ORI_Y_SE ORI_X_SW
#define ORI_Y_NE ORI_X_NW
#define ORI_Y_SW ORI_X_SE
#define ORI_Y_N  ORI_X_N
#define ORI_Y_S  ORI_X_S
#define ORI_Y_W  ORI_X_E
#define ORI_Y_E  ORI_X_W

// temporary variables, these can be modified
const TEMP_RAIL_CONTINUATION         = 9 ; // for buffers and fences
const TEMP_NEARBY_TILE_STATION       = 10; // for station detection
const TEMP_NEARBY_TILE_PERPENDICULAR = 11; // for platform perpendicular
const TEMP_NEARBY_TILE_GRF           = 12; // for grf detection
const TEMP_CURRENT_LANDSCAPE         = 13; // for landscape detection
const TEMP_RANDBIT_TILE              = 16; // tile random bit
const TEMP_RANDBIT_STATION           = 17; // station random bit
const TEMP_STATION_ERA               = 18; // for station era
const TEMP_HIDE_PLATFORM             = 19; // for platform hiding
const TEMP_PLAT_FORMATION_N          = 20; // for platform formation, north
const TEMP_PLAT_FORMATION_S          = 21; // for platform formation, south
const TEMP_DETERMINE_RECOLOUR        = 22; // for platform recolouring
const TEMP_DETERMINE_FENCE           = 23; // for fence on platform side
const TEMP_MISC                      = 24; // for misc purpose, several uses, bit inside will be packed
const TEMP_BUFFER_FORMATION_N        = 25; // for buffer formation, north
const TEMP_BUFFER_FORMATION_S        = 26; // for buffer formation, south

// spritesets
const S_PLATFORM = 0;
const S_MISC     = 1;
const S_SHELTER  = 2;

// private zone??
const S_OVERHEAD = 3;
const S_OVERPASS = 3;
const S_CROSSING = 3;
const S_BUFFER   = 3;

// platform enum
const ID_PLATFORM_CEMENT      = (0);
const ID_PLATFORM_ASPHALT     = (1);
const ID_PLATFORM_BRICK       = (2);
const ID_PLATFORM_CEMENT_ALT  = (3);
const ID_PLATFORM_ASPHALT_ALT = (4);
const ID_PLATFORM_BRICK_ALT   = (5);
const ID_PLATFORM_WOOD        = (6);
const ID_PLATFORM_WOOD_ALT    = (7);
const COUNT_INFLUENCER        = (ID_PLATFORM_WOOD_ALT);

const ID_CROSSING_REAL        = (COUNT_INFLUENCER + 1);
const ID_OVERPASS_REAL        = (ID_CROSSING_REAL + 1);
const ID_OVERPASS_STATION     = (ID_OVERPASS_REAL + 1);
const ID_MODULAR_LOW          = (ID_OVERPASS_STATION + 1);
const ID_SHELTER_TILES        = (ID_MODULAR_LOW + 1);
const ID_SHELTER_METAL        = (ID_SHELTER_TILES + 1);
const ID_CROSSING_REAL_WAYP   = (ID_SHELTER_METAL + 1);
const ID_BUFFER               = (ID_CROSSING_REAL_WAYP + 1);
const ID_BUFFER_SHELTER_TILES = (ID_BUFFER + 1);

// functions
#define SP_HIDE_SPRITE_BUFFERSTOP(tile) \
    (getbits(LOAD_TEMP(TEMP_RAIL_CONTINUATION), tile, 1))

#define SP_HIDE_SPRITE_CHECK_SNOW \
    !!(terrain_type != TILETYPE_SNOW)

// start of spritelayouts
spritelayout sp_platform_x() {
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    #define SP_BUFFERSTOP(pos, bit) \
    building { /* bufferstop */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_BUFFERSTOP, pos));\
                        BBOX_BUFFERSTOP_##pos\
        hide_sprite:    SP_HIDE_SPRITE_BUFFERSTOP(bit);\
    }
    #define SP_PLATFORM(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(GROUP_RECOLOUR_ERA, LOAD_TEMP(TEMP_STATION_ERA)));\
    }\
    childsprite { /* snow */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SNOW_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
        hide_sprite:    SP_HIDE_SPRITE_CHECK_SNOW;\
    }
    #define SP_FENCE(pos,pos2)\
    building { /* fence */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE, pos));\
        BBOX_FENCE_##pos\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_##pos, 1));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        PALETTE_USE_DEFAULT;\
    } \
    building { \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE_BARS, pos)); \
        BBOX_FENCE_##pos \
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_DETERMINE_FENCE), BIT_##pos2##PLAT, 1)); \
    }
    #define SP_FENCE_Y(pos,pos2)\
    building { /* fence */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE, pos));\
        BBOX_FENCE_##pos\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_Y_##pos, 1));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        PALETTE_USE_DEFAULT;\
    } \
    building { \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE_BARS, pos)); \
        BBOX_FENCE_##pos \
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_DETERMINE_FENCE), BIT_##pos2##PLAT, 1)); \
    }
    #define SP_FENCE_TRACK(pos,bit)\
    building { /* fence */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE, pos));\
        BBOX_FENCE_##pos\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_##pos, 1) ||\
        SP_HIDE_SPRITE_BUFFERSTOP(bit));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        PALETTE_USE_DEFAULT;\
    }
    #define SP_FENCE_TRACK_Y(pos,bit)\
    building { /* fence */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_FENCE, pos));\
        BBOX_FENCE_##pos\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_Y_##pos, 1) ||\
        SP_HIDE_SPRITE_BUFFERSTOP(bit));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        PALETTE_USE_DEFAULT;\
    }
    // the specific order of the sprites is important
    // because it affects the order of sprites in the purchase view
    SP_FENCE        (NW, N)
    SP_FENCE_TRACK  (NE, 0)
    SP_PLATFORM     (NW, N)
    SP_BUFFERSTOP   (NE, 0)
    SP_BUFFERSTOP   (SW, 1)
    SP_PLATFORM     (SE, S)
    SP_FENCE_TRACK  (SW, 1)
    SP_FENCE        (SE, S)
}

spritelayout sp_platform_y() {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y      (NE, N)
    SP_FENCE_TRACK_Y(NW, 0)
    SP_PLATFORM     (NE, N)
    SP_BUFFERSTOP   (NW, 0)
    SP_BUFFERSTOP   (SE, 1)
    SP_PLATFORM     (SW, S)
    SP_FENCE_TRACK_Y(SE, 1)
    SP_FENCE_Y      (SW, S)
}

spritelayout sp_platform_platform_x(platform_recolour) {
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    #define SP_PLATFORM_PLATFORM(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(platform_recolour, LOAD_TEMP(TEMP_STATION_ERA)));\
    }\
    childsprite { /* snow */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SNOW_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
        hide_sprite:    SP_HIDE_SPRITE_CHECK_SNOW;\
    }\
    childsprite { /* waiting passenger */ \
        sprite:         DEFAULT(pos);\
        /* we don't want it to be shown in the purchase menu */ \
        hide_sprite:    getbits(LOAD_TEMP(TEMP_MISC), 0, 1);\
    }
    SP_FENCE            (NW, N)
    SP_FENCE_TRACK      (NE, 0)
    SP_PLATFORM_PLATFORM(NW, N)
    SP_BUFFERSTOP       (NE, 0)
    SP_BUFFERSTOP       (SW, 1)
    SP_PLATFORM_PLATFORM(SE, S)
    SP_FENCE_TRACK      (SW, 1)
    SP_FENCE            (SE, S)
}

spritelayout sp_platform_platform_y(platform_recolour) {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y          (NE, N)
    SP_FENCE_TRACK_Y    (NW, 0)
    SP_PLATFORM_PLATFORM(NE, N)
    SP_BUFFERSTOP       (NW, 0)
    SP_BUFFERSTOP       (SE, 1)
    SP_PLATFORM_PLATFORM(SW, S)
    SP_FENCE_TRACK_Y    (SE, 1)
    SP_FENCE_Y          (SW, S)
}

spritelayout sp_platform_crossing_x() {
    #define SP_PLATFORM_CROSSING(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_CROSSING, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(LOAD_TEMP(TEMP_DETERMINE_RECOLOUR), LOAD_TEMP(TEMP_STATION_ERA)));\
    }\
    childsprite { /* snow */ \
        sprite:         CUSTOM(S_CROSSING, GET_SPRITE((GROUP_SNOW_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
        hide_sprite:    SP_HIDE_SPRITE_CHECK_SNOW;\
    }
    #define SP_CORNER_HOUSE(hide_pos_1, hide_pos_2, pos, num) \
    building { /* corner house */ \
        sprite:         CUSTOM(S_CROSSING, GET_SPRITE(GROUP_CORNER_HOUSE, num));\
        BBOX_CORNER_HOUSE_##pos\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_CROSSING, GET_SPRITE(GROUP_CORNER_HOUSE_RECOLOUR, LOAD_TEMP(TEMP_STATION_ERA)));\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_##hide_pos_1, 1)) ||\
                        (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_##hide_pos_2, 1)) ||\
                        (getbits(LOAD_TEMP(TEMP_RANDBIT_TILE)       , num           , 1));\
    }
    #define SP_CORNER_HOUSE_Y(hide_pos_1, hide_pos_2, pos, num) \
    building { /* corner house */ \
        sprite:         CUSTOM(S_CROSSING, GET_SPRITE(GROUP_CORNER_HOUSE, num));\
        BBOX_CORNER_HOUSE_##pos\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_CROSSING, GET_SPRITE(GROUP_CORNER_HOUSE_RECOLOUR, LOAD_TEMP(TEMP_STATION_ERA)));\
        hide_sprite:    (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_Y_##hide_pos_1, 1)) ||\
                        (getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_Y_##hide_pos_2, 1)) ||\
                        (getbits(LOAD_TEMP(TEMP_RANDBIT_TILE)       , num           , 1));\
    }
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    //SP_FENCE        (NW, N)
    SP_FENCE_TRACK  (NE, 0)
    SP_PLATFORM_CROSSING(NW, N)
    SP_BUFFERSTOP   (NE, 0)
    SP_BUFFERSTOP   (SW, 1)
    SP_PLATFORM_CROSSING(SE, S)
    //SP_FENCE        (SE, S)
    SP_FENCE_TRACK  (SW, 1)
    SP_CORNER_HOUSE_Y (NW,NE,N,0) // N
    SP_CORNER_HOUSE_Y (SE,NE,E,1) // E
    SP_CORNER_HOUSE_Y (SW,SE,S,2) // S
    SP_CORNER_HOUSE_Y (NW,SW,W,3) // W
}

spritelayout sp_platform_crossing_y() {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    //SP_FENCE_Y      (NE, N)
    SP_FENCE_TRACK_Y(NW, 0)
    SP_PLATFORM_CROSSING(NE, N)
    SP_BUFFERSTOP   (NW, 0)
    SP_BUFFERSTOP   (SE, 1)
    SP_PLATFORM_CROSSING(SW, S)
    SP_FENCE_TRACK_Y(SE, 1)
    //SP_FENCE_Y      (SW, S)
    SP_CORNER_HOUSE (NW,NE,N,0) // N
    SP_CORNER_HOUSE (SE,NE,E,1) // E
    SP_CORNER_HOUSE (SW,SE,S,2) // S
    SP_CORNER_HOUSE (NW,SW,W,3) // W
}


spritelayout sp_platform_overhead_x() {
    #define SP_OVERHEAD_STRUCTURE(pos, height) \
    building { /* overhead structure */ \
        sprite:         CUSTOM(S_OVERHEAD, GET_SPRITE_MISC(GROUP_OVERHEAD_STRUCTURE, pos));\
        recolour_mode:  RECOLOUR_REMAP;\
        /*palette:        CUSTOM(S_OVERHEAD, GET_SPRITE(GROUP_RECOLOUR_ERA, LOAD_TEMP(TEMP_STATION_ERA)));*/ \
        palette:        PALETTE_USE_DEFAULT;\
        BBOX_OVERHEAD_STRUCTURE(height)\
    }
    #define SP_PLATFORM_OVERHEAD(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(LOAD_TEMP(TEMP_DETERMINE_RECOLOUR), LOAD_TEMP(TEMP_STATION_ERA)));\
    }\
    childsprite { /* shadow */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_SHADOW_LONG, pos));\
        recolour_mode:  RECOLOUR_TRANSPARENT;\
        palette:        PALETTE_TRANSPARENT;\
    }\
    childsprite { /* waiting passenger */ \
        sprite:         DEFAULT(pos);\
        /* we don't want it to be shown in the purchase menu */ \
        hide_sprite:    getbits(LOAD_TEMP(TEMP_MISC), 0, 1);\
    }
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    SP_FENCE                (NW, N)
    SP_FENCE_TRACK          (NE, 0)
    SP_PLATFORM_OVERHEAD    (NW, N)
    SP_BUFFERSTOP           (NE, 0)
    SP_BUFFERSTOP           (SW, 1)
    SP_PLATFORM_OVERHEAD    (SE, S)
    SP_FENCE_TRACK          (SW, 1)
    SP_FENCE                (SE, S)
    SP_OVERHEAD_STRUCTURE   (NW, 12)
}

spritelayout sp_platform_overhead_y() {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y              (NE, N)
    SP_FENCE_TRACK_Y        (NW, 0)
    SP_PLATFORM_OVERHEAD    (NE, N)
    SP_BUFFERSTOP           (NW, 0)
    SP_BUFFERSTOP           (SE, 1)
    SP_PLATFORM_OVERHEAD    (SW, S)
    SP_FENCE_TRACK_Y        (SE, 1)
    SP_FENCE_Y              (SW, S)
    SP_OVERHEAD_STRUCTURE   (NE, 12)
}


spritelayout sp_platform_overpass_x() {
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    #define SP_PLATFORM_OVERPASS(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1) || LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) == 3;\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(LOAD_TEMP(TEMP_DETERMINE_RECOLOUR), LOAD_TEMP(TEMP_STATION_ERA)));\
    }\
    childsprite { /* snow */ \
        sprite:         CUSTOM(S_PLATFORM, GET_SPRITE((GROUP_SNOW_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
        hide_sprite:    SP_HIDE_SPRITE_CHECK_SNOW;\
    }\
    childsprite { /* shadow */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_SHADOW_SHORT, pos));\
        recolour_mode:  RECOLOUR_TRANSPARENT;\
        palette:        PALETTE_TRANSPARENT;\
    }\
    building { /* the real overpass */ \
        sprite:         CUSTOM(S_OVERPASS, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_OVERPASS_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_OVERPASS, GET_SPRITE(GROUP_RECOLOUR_ERA, LOAD_TEMP(TEMP_STATION_ERA)));\
    }
    #define SP_OVERPASS(pos, num) \
    building { /* overpass */ \
        sprite:         CUSTOM(S_OVERPASS, GET_SPRITE(GROUP_OVERPASS, num));\
        BBOX_OVERPASS_##pos\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_OVERPASS, GET_SPRITE(GROUP_RECOLOUR_ERA, LOAD_TEMP(TEMP_STATION_ERA)));\
        hide_sprite:    !!(LOAD_TEMP(TEMP_HIDE_PLATFORM) % PLATFORM_FORMATION_COUNT);\
    }
    SP_FENCE            (NW, N)
    SP_FENCE_TRACK      (NE, 0)
    SP_PLATFORM_OVERPASS(NW, N)
    SP_BUFFERSTOP       (NE, 0)
    SP_BUFFERSTOP       (SW, 1)
    SP_PLATFORM_OVERPASS(SE, S)
    SP_FENCE_TRACK      (SW, 1)
    SP_FENCE            (SE, S)
    SP_OVERPASS         (X , 0)
}

spritelayout sp_platform_overpass_y() {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y          (NE, N)
    SP_FENCE_TRACK_Y    (NW, 0)
    SP_PLATFORM_OVERPASS(NE, N)
    SP_BUFFERSTOP       (NW, 0)
    SP_BUFFERSTOP       (SE, 1)
    SP_PLATFORM_OVERPASS(SW, S)
    SP_FENCE_TRACK_Y    (SE, 1)
    SP_FENCE_Y          (SW, S)
    SP_OVERPASS         (Y , 1)
}

spritelayout sp_platform_shelter_x() {
    #define SP_SHELTER_CHILDSPRITE(pos, pos2) \
    childsprite { /* shelter */ \
        sprite:         CUSTOM(S_SHELTER, GET_SPRITE_SHELTER(GROUP_SYM, pos));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_SHELTER, GET_SPRITE(GROUP_RECOLOUR_SHELTER_ERA, LOAD_TEMP(TEMP_STATION_ERA)));\
    }
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    SP_FENCE                (NW, N)
    SP_FENCE_TRACK          (NE, 0)
    SP_PLATFORM_OVERHEAD    (NW, N)
    SP_SHELTER_CHILDSPRITE  (NW, N)
    SP_BUFFERSTOP           (NE, 0)
    SP_BUFFERSTOP           (SW, 1)
    SP_PLATFORM_OVERHEAD    (SE, S)
    SP_SHELTER_CHILDSPRITE  (SE, S)
    SP_FENCE_TRACK          (SW, 1)
    SP_FENCE                (SE, S)
}

spritelayout sp_platform_shelter_y(){
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y              (NE, N)
    SP_FENCE_TRACK_Y        (NW, 0)
    SP_PLATFORM_OVERHEAD    (NE, N)
    SP_SHELTER_CHILDSPRITE  (NE, N)
    SP_BUFFERSTOP           (NW, 0)
    SP_BUFFERSTOP           (SE, 1)
    SP_PLATFORM_OVERHEAD    (SW, S)
    SP_SHELTER_CHILDSPRITE  (SW, S)
    SP_FENCE_TRACK_Y        (SE, 1)
    SP_FENCE_Y              (SW, S)
}

spritelayout sp_buffer_x() {
    #define SP_PLATFORM_BUFFER(pos, pos2) \
    building { /* platform */ \
        sprite:         CUSTOM(S_BUFFER, GET_SPRITE((GROUP_SYM + LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) + LOAD_TEMP(TEMP_BUFFER_FORMATION_##pos2)), pos));\
                        BBOX_PLATFORM_##pos\
        hide_sprite:    getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_##pos2##PLAT, 1);\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(LOAD_TEMP(TEMP_DETERMINE_RECOLOUR), LOAD_TEMP(TEMP_STATION_ERA)));\
    }
    #define SP_PLATFORM_BUFFER_MIDDLE(pos, rel) \
    building{ /* platform middle section */ \
        sprite:         CUSTOM(S_BUFFER, GET_SPRITE((GROUP_BUFFER_MIDDLE_SYM + (((LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N)) % 3))), pos));\
                        BBOX_BUFFER_MIDDLE_##rel\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_PLATFORM, GET_SPRITE(LOAD_TEMP(TEMP_DETERMINE_RECOLOUR), LOAD_TEMP(TEMP_STATION_ERA)));\
    }
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    SP_FENCE(NW, N)
    SP_FENCE(NE, N)
    SP_PLATFORM_BUFFER(NW, N)
    SP_PLATFORM_BUFFER_MIDDLE(NW,X)
    SP_PLATFORM_BUFFER(SE, S)
    SP_FENCE(SW, S)
    SP_FENCE(SE, S)
}

spritelayout sp_buffer_y() {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y(NE, N)
    SP_FENCE_Y(NW, N)
    SP_PLATFORM_BUFFER(NE, N)
    SP_PLATFORM_BUFFER_MIDDLE(NE,Y)
    SP_PLATFORM_BUFFER(SW, S)
    SP_FENCE_Y(SE, S)
    SP_FENCE_Y(SW, S)
}

spritelayout sp_buffer_shelter_x(){
    #define SP_BUFFER_SHELTER_CHILDSPRITE(pos, pos2) \
    childsprite { /* shadow */ \
        sprite:         CUSTOM(S_MISC, GET_SPRITE_MISC(GROUP_SHADOW_LONG, pos));\
        recolour_mode:  RECOLOUR_TRANSPARENT;\
        palette:        PALETTE_TRANSPARENT;\
        hide_sprite:    ((LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N)) ^ LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) || LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) == 3);\
    }\
    childsprite { /* shelter */ \
        sprite:         CUSTOM(S_SHELTER, GET_SPRITE_SHELTER(GROUP_SYM, pos));\
        recolour_mode:  RECOLOUR_REMAP;\
        palette:        CUSTOM(S_SHELTER, GET_SPRITE(GROUP_RECOLOUR_SHELTER_ERA, LOAD_TEMP(TEMP_STATION_ERA)));\
        hide_sprite:    ((LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N)) ^ LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) || LOAD_TEMP(TEMP_PLAT_FORMATION_##pos2) == 3);\
    }

    ground {sprite: GROUNDSPRITE_RAIL_X;}
    SP_FENCE(NW, N)
    SP_FENCE(NE, N)
    SP_PLATFORM_BUFFER(NW, N)
    SP_BUFFER_SHELTER_CHILDSPRITE(NW, N)
    SP_PLATFORM_BUFFER_MIDDLE(NW,X)
    SP_PLATFORM_BUFFER(SE, S)
    SP_BUFFER_SHELTER_CHILDSPRITE(SE, S)
    SP_FENCE(SW, S)
    SP_FENCE(SE, S)
}

spritelayout sp_buffer_shelter_y(){
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    SP_FENCE_Y(NE, N)
    SP_FENCE_Y(NW, N)
    SP_PLATFORM_BUFFER(NE, N)
    SP_BUFFER_SHELTER_CHILDSPRITE(NE, N)
    SP_PLATFORM_BUFFER_MIDDLE(NE,Y)
    SP_PLATFORM_BUFFER(SW, S)
    SP_BUFFER_SHELTER_CHILDSPRITE(SW, S)
    SP_FENCE_Y(SE, S)
    SP_FENCE_Y(SW, S)
}

// temp storage functions
switch (FEAT_STATIONS, SELF, sw_check_nearby_landscape,
    // output range: 0b0000..0b1111
    // checks the nearby landscape
    nearby_tile_slope(ORI_X_NE) << TILE_X_NE|
    nearby_tile_slope(ORI_X_SW) << TILE_X_SW|
    nearby_tile_slope(ORI_X_NW) << TILE_X_NW|
    nearby_tile_slope(ORI_X_SE) << TILE_X_SE|
    nearby_tile_slope(ORI_X_N)  << TILE_X_N|
    nearby_tile_slope(ORI_X_S)  << TILE_X_S|
    nearby_tile_slope(ORI_X_W)  << TILE_X_W|
    nearby_tile_slope(ORI_X_E)  << TILE_X_E) {return;}


switch (FEAT_STATIONS, SELF, sw_check_rail_continuation,
    // output range: 0b00..0b11
    // checks if the rail continuation is present
    hasbit(rail_continuation, 1) << TILE_X_NE|
    hasbit(rail_continuation, 0) << TILE_X_SW) {return;}


switch (FEAT_STATIONS, SELF, sw_check_nearby_tile_station,
    // output range: 0b0000..0b1111
    // checks if the nearby tile is a station
    (nearby_tile_same_station(ORI_X_NE) && nearby_tile_is_station(ORI_X_NE)) << TILE_X_NE|
    (nearby_tile_same_station(ORI_X_SW) && nearby_tile_is_station(ORI_X_SW)) << TILE_X_SW|
    (nearby_tile_same_station(ORI_X_NW) && nearby_tile_is_station(ORI_X_NW)) << TILE_X_NW|
    (nearby_tile_same_station(ORI_X_SE) && nearby_tile_is_station(ORI_X_SE)) << TILE_X_SE|
    (nearby_tile_same_station(ORI_X_N)  && nearby_tile_is_station(ORI_X_N))  << TILE_X_N|
    (nearby_tile_same_station(ORI_X_S)  && nearby_tile_is_station(ORI_X_S))  << TILE_X_S|
    (nearby_tile_same_station(ORI_X_W)  && nearby_tile_is_station(ORI_X_W))  << TILE_X_W|
    (nearby_tile_same_station(ORI_X_E)  && nearby_tile_is_station(ORI_X_E))  << TILE_X_E) {return;}


switch (FEAT_STATIONS, SELF, sw_check_nearby_tile_perpendicular,
    // output range: 0b0000..0b1111
    // checks if the nearby tile is perpendicular
    nearby_tile_perpendicular(ORI_X_NE) << TILE_X_NE|
    nearby_tile_perpendicular(ORI_X_SW) << TILE_X_SW|
    nearby_tile_perpendicular(ORI_X_NW) << TILE_X_NW|
    nearby_tile_perpendicular(ORI_X_SE) << TILE_X_SE|
    nearby_tile_perpendicular(ORI_X_N)  << TILE_X_N|
    nearby_tile_perpendicular(ORI_X_S)  << TILE_X_S|
    nearby_tile_perpendicular(ORI_X_W)  << TILE_X_W|
    nearby_tile_perpendicular(ORI_X_E)  << TILE_X_E) {return;}


switch (FEAT_STATIONS, SELF, sw_check_nearby_tile_grf,
    // output range: 0b0000..0b1111
    // checks if the nearby tile is the same grf
    nearby_tile_same_grf(ORI_X_NE) << TILE_X_NE|
    nearby_tile_same_grf(ORI_X_SW) << TILE_X_SW|
    nearby_tile_same_grf(ORI_X_NW) << TILE_X_NW|
    nearby_tile_same_grf(ORI_X_SE) << TILE_X_SE|
    nearby_tile_same_grf(ORI_X_N)  << TILE_X_N|
    nearby_tile_same_grf(ORI_X_S)  << TILE_X_S|
    nearby_tile_same_grf(ORI_X_W)  << TILE_X_W|
    nearby_tile_same_grf(ORI_X_E)  << TILE_X_E) {return;}


switch (FEAT_STATIONS, SELF, sw_station_era,
    // output range: 0..2
    // checks the station era
    (current_date < date(YEAR_ERA_2,1,1) ? 0 :
     current_date < date(YEAR_ERA_3,1,1) ? 1 : 2)){return;}

switch (FEAT_STATIONS, SELF, sw_detect_platform, id, plat,
    // output range: 0b00..0b11
    // checks if the tile is a platform
    id >= 10000 && id <= 10010 ? 1 :
    (!getbits(getbits(id,BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) % PLATFORM_FORMATION_COUNT + 1, plat, 1))){return;}

switch (FEAT_STATIONS, SELF, sw_hide_platform,
    // output range: 0b00..0b11
    // checks if the platform should be hidden
    (sw_detect_platform(LOAD_TEMP(TILE_SELF), BIT_NPLAT) << BIT_NPLAT) |
    (sw_detect_platform(LOAD_TEMP(TILE_SELF), BIT_SPLAT) << BIT_SPLAT)){return;}

switch (FEAT_STATIONS, SELF, sw_hide_platform_id, id,
    // output range: 0b00..0b11
    // this allows manually putting the id of the station
    // checks if the platform should be hidden
    (sw_detect_platform(id, BIT_NPLAT) << BIT_NPLAT) |
    (sw_detect_platform(id, BIT_SPLAT) << BIT_SPLAT)){return;}

switch (FEAT_STATIONS, SELF, sw_get_platform_formation_N,
    // output range: 0b00..0b11
    // gets platform formation for northern platform
    ((!getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_SW, 1)       |
     (sw_detect_platform(LOAD_TEMP(TILE_X_SW), BIT_NPLAT)               |
      nearby_tile_perpendicular(ORI_X_SW))                              &
       getbits(LOAD_TEMP(TEMP_NEARBY_TILE_GRF),     TILE_X_SW, 1)) << 1 |
     (!getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_NE, 1)       |
     (sw_detect_platform(LOAD_TEMP(TILE_X_NE), BIT_NPLAT)               |
      nearby_tile_perpendicular(ORI_X_NE))                              &
       getbits(LOAD_TEMP(TEMP_NEARBY_TILE_GRF),     TILE_X_NE, 1)) << 0 )){return;}

switch (FEAT_STATIONS, SELF, sw_get_platform_formation_S,
    // output range: 0b00..0b11
    // gets platform formation for southern platform
    ((!getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_SW, 1)       |
     (sw_detect_platform(LOAD_TEMP(TILE_X_SW), BIT_SPLAT)               |
      nearby_tile_perpendicular(ORI_X_SW))                              &
       getbits(LOAD_TEMP(TEMP_NEARBY_TILE_GRF),     TILE_X_SW, 1)) << 1 |
     (!getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_NE, 1)       |
     (sw_detect_platform(LOAD_TEMP(TILE_X_NE), BIT_SPLAT)               |
      nearby_tile_perpendicular(ORI_X_NE))                              &
       getbits(LOAD_TEMP(TEMP_NEARBY_TILE_GRF),     TILE_X_NE, 1)) << 0 )){return;}
// we want to put all calculations and checks in spritelayouts, so here in
// the switch we only store the results of the checks in temporary variables

switch (FEAT_STATIONS, SELF, sw_determine_recolour,
    // output range: it's written down there
    // we first check for the southern platform, if there isn't one, we check for the northern platform
    // if both isn't there, we then check further away
    // if none of the platforms are there, we then use the default era recolour
    // tile 1
    nearby_tile_same_station( 1, 0) * (getbits(nearby_tile_station_id( 1, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id( 1, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    nearby_tile_same_station(-1, 0) * (getbits(nearby_tile_station_id(-1, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id(-1, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    // tile 2
    nearby_tile_same_station( 2, 0) * (getbits(nearby_tile_station_id( 2, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id( 2, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    nearby_tile_same_station(-2, 0) * (getbits(nearby_tile_station_id(-2, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id(-2, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    // tile 3
    nearby_tile_same_station( 3, 0) * (getbits(nearby_tile_station_id( 3, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id( 3, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    nearby_tile_same_station(-3, 0) * (getbits(nearby_tile_station_id(-3, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id(-3, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    // tile 4
    nearby_tile_same_station( 4, 0) * (getbits(nearby_tile_station_id( 4, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id( 4, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    nearby_tile_same_station(-4, 0) * (getbits(nearby_tile_station_id(-4, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id(-4, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    // tile 5
    nearby_tile_same_station( 5, 0) * (getbits(nearby_tile_station_id( 5, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id( 5, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 :
    nearby_tile_same_station(-5, 0) * (getbits(nearby_tile_station_id(-5, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 <= COUNT_INFLUENCER) ?
    getbits(nearby_tile_station_id(-5, 0), BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) / 3 : 0)
{
    ID_PLATFORM_CEMENT:         GROUP_RECOLOUR_ERA;
    ID_PLATFORM_CEMENT_ALT:     GROUP_RECOLOUR_ERA;
    ID_PLATFORM_ASPHALT:        GROUP_PLATFORM_RECOLOUR_ASPHALT;
    ID_PLATFORM_ASPHALT_ALT:    GROUP_PLATFORM_RECOLOUR_ASPHALT;
    ID_PLATFORM_BRICK:          GROUP_PLATFORM_RECOLOUR_BRICK;
    ID_PLATFORM_BRICK_ALT:      GROUP_PLATFORM_RECOLOUR_BRICK;
    ID_PLATFORM_WOOD:           GROUP_PLATFORM_RECOLOUR_WOOD;
    ID_PLATFORM_WOOD_ALT:       GROUP_PLATFORM_RECOLOUR_WOOD;
    default: GROUP_RECOLOUR_ERA;
}

// the bufferstop is a special case. Unlike other sprites it reads both northern and southern bits
// so we have four bits. and therefore here is a way to match the sprites.
/*
* rconnection

0101: 5
0111: 7
1110: 14

* lconnection

1010: 10
1011: 11
1101: 13

LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N)?

0b00 for middle connection,
0b01 for right connection,
0b10 for left connection,
0b11 for both connection, but this one will be treated as middle connection - using a simple % 3

*/

switch (FEAT_STATIONS, SELF, sw_buffer_formation_preswitch,
    LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N))
{
    0: 0;
    1: 3;
    2: 4;
    3: 0;
}

switch (FEAT_STATIONS, SELF, sw_buffer_formation_N,
    LOAD_TEMP(TEMP_PLAT_FORMATION_N) == 3 ?
    0xFF : LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N))
{
    0: 0;
    1: 3;
    2: 3;
    0xFF: sw_buffer_formation_preswitch();
}

switch (FEAT_STATIONS, SELF, sw_buffer_formation_S,
    LOAD_TEMP(TEMP_PLAT_FORMATION_S) == 3 ?
    0xFF : LOAD_TEMP(TEMP_PLAT_FORMATION_S) & LOAD_TEMP(TEMP_PLAT_FORMATION_N))
{
    0: 0;
    1: 3;
    2: 3;
    0xFF: sw_buffer_formation_preswitch();
}

switch (FEAT_STATIONS, SELF, sw_determine_fence,
    // output range: 0b00..0b11
    // this switch controls the fence sprites
    // whether it should be the normal style, or bars style
    // the normal style is used when there isn't any station nearby
    // the bars style is used when there is tracks nearby, and/or the platforms aren't protected by fences
    // so it detects the nearby stations, and the nearby tracks

    // detects self station id. Check if is in the correct range
    // currently we only want to limit it to the "platform" platforms
    (
        (
            !(!getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_NPLAT, 1) &&
            getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_NW, 1) &&
            (getbits(sw_hide_platform_id(LOAD_TEMP(TILE_X_NW)), BIT_SPLAT, 1) ||
            (0))) << BIT_NPLAT
        ) |
        (
            !(!getbits(LOAD_TEMP(TEMP_HIDE_PLATFORM), BIT_SPLAT, 1) &&
            getbits(LOAD_TEMP(TEMP_NEARBY_TILE_STATION), TILE_X_SE, 1) &&
            (getbits(sw_hide_platform_id(LOAD_TEMP(TILE_X_SE)), BIT_NPLAT, 1) ||
            (0))) << BIT_SPLAT
        )
    )
){return;}

// double rail, idea stolen from xussr stations.
// instead of making it waypoints I will make it stations - at least in my opintion it is better
switch (FEAT_STATIONS, SELF, sw_double_rail_formation_preswitch, my_id, client_id, my_id + client_id)
{return 1;} // TODO write this function

switch (FEAT_STATIONS, SELF, sw_double_rail_formation, is_north,
    // output range: GROUP_SYM, GROUP_ASYM_1, GROUP_ASYM_2, 0xFF
    // formations: sym, asym 1, asym 2, and sym edge, which is none.
    is_north ?
    sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_SELF), LOAD_TEMP(TILE_X_NW)) ?
        sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_X_NE), LOAD_TEMP(TILE_X_N)) << BIT_NPLAT |
        sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_X_SW), LOAD_TEMP(TILE_X_W)) << BIT_SPLAT : 0xFF
    :
    sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_SELF), LOAD_TEMP(TILE_X_SE)) ?
        sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_X_NE), LOAD_TEMP(TILE_X_E)) << BIT_NPLAT |
        sw_double_rail_formation_preswitch(LOAD_TEMP(TILE_X_SW), LOAD_TEMP(TILE_X_S)) << BIT_SPLAT : 0xFF)
{
    0: return GROUP_SYM;
    1: return GROUP_ASYM_1;
    2: return GROUP_ASYM_2;
    0xFF: return 0xFF; // means that there aren't any tracks to connect
}

switch (FEAT_STATIONS, SELF, sw_platform, [
    // tile id storage
    STORE_TEMP(nearby_tile_station_id(ORI_X_NE),        TILE_X_NE),
    STORE_TEMP(nearby_tile_station_id(ORI_X_SW),        TILE_X_SW),
    STORE_TEMP(nearby_tile_station_id(ORI_X_NW),        TILE_X_NW),
    STORE_TEMP(nearby_tile_station_id(ORI_X_SE),        TILE_X_SE),
    STORE_TEMP(nearby_tile_station_id(ORI_X_N),         TILE_X_N),
    STORE_TEMP(nearby_tile_station_id(ORI_X_S),         TILE_X_S),
    STORE_TEMP(nearby_tile_station_id(ORI_X_W),         TILE_X_W),
    STORE_TEMP(nearby_tile_station_id(ORI_X_E),         TILE_X_E),
    STORE_TEMP(nearby_tile_station_id(ORI_SELF),        TILE_SELF),
    // functions
    STORE_TEMP(sw_check_rail_continuation(),            TEMP_RAIL_CONTINUATION),
    STORE_TEMP(sw_check_nearby_tile_station(),          TEMP_NEARBY_TILE_STATION),
    STORE_TEMP(sw_check_nearby_tile_perpendicular(),    TEMP_NEARBY_TILE_PERPENDICULAR),
    STORE_TEMP(sw_check_nearby_tile_grf(),              TEMP_NEARBY_TILE_GRF),
    STORE_TEMP(nearby_tile_slope(0, 0),                 TEMP_CURRENT_LANDSCAPE),
    STORE_TEMP(sw_station_era(),                        TEMP_STATION_ERA),
    STORE_TEMP(sw_hide_platform(),                      TEMP_HIDE_PLATFORM),
    STORE_TEMP(sw_get_platform_formation_N(),           TEMP_PLAT_FORMATION_N),
    STORE_TEMP(sw_get_platform_formation_S(),           TEMP_PLAT_FORMATION_S),
    STORE_TEMP(sw_determine_recolour(),                 TEMP_DETERMINE_RECOLOUR),
    STORE_TEMP(sw_determine_fence(),                    TEMP_DETERMINE_FENCE),
    STORE_TEMP(sw_buffer_formation_N(),                 TEMP_BUFFER_FORMATION_N),
    STORE_TEMP(sw_buffer_formation_S(),                 TEMP_BUFFER_FORMATION_S),
    STORE_TEMP(0,                                       TEMP_MISC),
])
{return;}

switch (FEAT_STATIONS, SELF, sw_platform_purchase, station_id, [
    // tile id storage
    STORE_TEMP(0,           TILE_X_NE),
    STORE_TEMP(0,           TILE_X_SW),
    STORE_TEMP(0,           TILE_X_NW),
    STORE_TEMP(0,           TILE_X_SE),
    STORE_TEMP(0,           TILE_X_N),
    STORE_TEMP(0,           TILE_X_S),
    STORE_TEMP(0,           TILE_X_W),
    STORE_TEMP(0,           TILE_X_E),
    STORE_TEMP(station_id,  TILE_SELF),
    // checks and functions
    STORE_TEMP(2,           TEMP_RAIL_CONTINUATION),
    STORE_TEMP(1 << TILE_X_SW | 1 << TILE_X_SE,TEMP_NEARBY_TILE_STATION),
    STORE_TEMP(0,           TEMP_NEARBY_TILE_PERPENDICULAR),
    STORE_TEMP(0,           TEMP_NEARBY_TILE_GRF),
    STORE_TEMP(0,           TEMP_CURRENT_LANDSCAPE),
    // functions
    STORE_TEMP((current_date < date(YEAR_ERA_2,1,1) ? 0 :
                current_date < date(YEAR_ERA_3,1,1) ? 1 : 2),                        TEMP_STATION_ERA),
    STORE_TEMP((station_id >= 10000 && station_id <= 10010 ? 3 :
                !getbits(getbits(station_id,BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) % PLATFORM_FORMATION_COUNT + 1, BIT_NPLAT, 1) << BIT_NPLAT) |
               (!getbits(getbits(station_id,BIT_PLATFORM_TYPE, SIZE_BIT_PLATFORM_TYPE) % PLATFORM_FORMATION_COUNT + 1, BIT_SPLAT, 1) << BIT_SPLAT),TEMP_HIDE_PLATFORM),
    STORE_TEMP(2,           TEMP_PLAT_FORMATION_N),
    STORE_TEMP(3,           TEMP_PLAT_FORMATION_S),
//    STORE_TEMP(current_date,                            TEMP_CURRENT_DATE),
//    STORE_TEMP(terrain_type,                            TEMP_TERRAIN_TYPE),
    STORE_TEMP(15,                        TEMP_RANDBIT_TILE),
//    STORE_TEMP(random_bits_station,                     TEMP_RANDBIT_STATION),
    STORE_TEMP(GROUP_RECOLOUR_ERA,      TEMP_DETERMINE_RECOLOUR),
    STORE_TEMP(1,                    TEMP_DETERMINE_FENCE),
    STORE_TEMP(1,                                       TEMP_MISC),
])
{return;}

#define STN_STATION_PROPERTY_0 \
property {\
    class:                  "WINS";\
    name:                   string(STR_GRF_NAME);\
    non_traversable_tiles:  0;\
    draw_pylon_tiles:       STAT_ALL_TILES;\
    hide_wire_tiles:        0;\
    cargo_threshold:        50;\
    general_flags:          bitmask(STAT_FLAG_DISTRIBUTED_CARGO);\
    cargo_random_triggers:  [PASS, MAIL];\
}

#define STN_STATION_PROPERTY_1 /* station as waypoint */ \
property {\
    class:                  0x4E4957FF; /* \xffWIN */ \
    name:                   string(STR_GRF_NAME);\
    non_traversable_tiles:  0;\
    draw_pylon_tiles:       STAT_ALL_TILES;\
    hide_wire_tiles:        0;\
}

#define STN_STATION_PROPERTY_2 \
property {\
    class:                  "WINS";\
    name:                   string(STR_GRF_NAME);\
    non_traversable_tiles:  STAT_ALL_TILES;\
    draw_pylon_tiles:       0;\
    hide_wire_tiles:        STAT_ALL_TILES;\
    cargo_threshold:        50;\
    general_flags:          bitmask(STAT_FLAG_DISTRIBUTED_CARGO);\
    cargo_random_triggers:  [PASS, MAIL];\
}

#define STN_CALC_ID(platform_type, shelter_type) \
    /* this one originally was shelter << BIT_SHELTER_TYPE, but I decided to disable shelters */ \
    (((platform_type) << BIT_PLATFORM_TYPE) | ((shelter_type) >> BIT_SHELTER_TYPE))

#define STN_CALC_PLATFORM_BIT(group, nplat, splat) \
    ((group * 3) + (nplat << BIT_NPLAT) + (splat << BIT_SPLAT) - 1)

#define STN_STATION_WRAPPER(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_x(), sp_platform_y()];\
        custom_spritesets: [platform_spriteset, s_misc, s_shelter_tiles];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
    }\
}

#define STN_STATION_WRAPPER_CROSSING(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_crossing_x(), sp_platform_crossing_y()];\
        custom_spritesets: [s_platform_cement, s_misc, s_shelter_tiles, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
    }\
}

#define STN_STATION_WRAPPER_PLATFORM(name, property, platform_type, platform_spriteset, platform_recolour)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_platform_x(platform_recolour), sp_platform_platform_y(platform_recolour)];\
        custom_spritesets: [platform_spriteset, s_misc, s_shelter_tiles];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
        default: rsw_cargo_boxes;\
        PASS: rsw_cargo_passenger;\
    }\
}

#define STN_STATION_WRAPPER_OVERHEAD(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_overhead_x(), sp_platform_overhead_y()];\
        custom_spritesets: [s_platform_cement, s_misc, s_shelter_tiles, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
        default: rsw_cargo_boxes;\
        PASS: rsw_cargo_passenger;\
    }\
}

#define STN_STATION_WRAPPER_OVERPASS(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_overpass_x(), sp_platform_overpass_y()];\
        custom_spritesets: [s_platform_cement, s_misc, s_shelter_tiles, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
    }\
}

#define STN_STATION_WRAPPER_SHELTER(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_platform_shelter_x(), sp_platform_shelter_y()];\
        custom_spritesets: [s_platform_cement, s_misc, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
        default: rsw_cargo_boxes;\
        PASS: rsw_cargo_passenger;\
    }\
}

#define STN_STATION_WRAPPER_BUFFER(name, property, platform_type, platform_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_buffer_x(), sp_buffer_y()];\
        custom_spritesets: [s_platform_cement, s_misc, s_shelter_tiles, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
    }\
}

#define STN_STATION_WRAPPER_BUFFER_SHELTER(name, property, platform_type, platform_spriteset, shelter_spriteset)\
item(FEAT_STATIONS, i_station_##name,\
    platform_type) {\
    STN_STATION_PROPERTY_##property\
    graphics {\
        sprite_layouts: [sp_buffer_shelter_x(), sp_buffer_shelter_y()];\
        custom_spritesets: [s_platform_cement, s_misc, shelter_spriteset, platform_spriteset];\
        prepare_layout: sw_platform();\
        purchase_prepare_layout: sw_platform_purchase(platform_type);\
    }\
}


// cement platform
STN_STATION_WRAPPER_PLATFORM(cement_both            , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT,1,1), s_platform_cement, GROUP_RECOLOUR_ERA)
STN_STATION_WRAPPER_PLATFORM(cement_1               , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT,1,0), s_platform_cement, GROUP_RECOLOUR_ERA)
STN_STATION_WRAPPER_PLATFORM(cement_2               , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT,0,1), s_platform_cement, GROUP_RECOLOUR_ERA)

// asphalt platform
STN_STATION_WRAPPER_PLATFORM(asphalt_both           , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT,1,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_ASPHALT)
STN_STATION_WRAPPER_PLATFORM(asphalt_1              , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT,1,0), s_platform_cement, GROUP_PLATFORM_RECOLOUR_ASPHALT)
STN_STATION_WRAPPER_PLATFORM(asphalt_2              , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT,0,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_ASPHALT)

// brick platform
STN_STATION_WRAPPER_PLATFORM(brick_both             , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK,1,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_BRICK)
STN_STATION_WRAPPER_PLATFORM(brick_1                , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK,1,0), s_platform_cement, GROUP_PLATFORM_RECOLOUR_BRICK)
STN_STATION_WRAPPER_PLATFORM(brick_2                , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK,0,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_BRICK)

// wood platform
STN_STATION_WRAPPER_PLATFORM(wood_both              , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_WOOD,1,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_WOOD)
STN_STATION_WRAPPER_PLATFORM(wood_1                 , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_WOOD,1,0), s_platform_cement, GROUP_PLATFORM_RECOLOUR_WOOD)
STN_STATION_WRAPPER_PLATFORM(wood_2                 , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_WOOD,0,1), s_platform_cement, GROUP_PLATFORM_RECOLOUR_WOOD)

// cement platform_alternative
STN_STATION_WRAPPER_PLATFORM(cement_alt_both        , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT_ALT,1,1), s_platform_alt, GROUP_RECOLOUR_ERA)
STN_STATION_WRAPPER_PLATFORM(cement_alt_1           , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT_ALT,1,0), s_platform_alt, GROUP_RECOLOUR_ERA)
STN_STATION_WRAPPER_PLATFORM(cement_alt_2           , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_CEMENT_ALT,0,1), s_platform_alt, GROUP_RECOLOUR_ERA)

// asphalt platform_alternative
STN_STATION_WRAPPER_PLATFORM(asphalt_alt_both       , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT_ALT,1,1), s_platform_alt, GROUP_PLATFORM_RECOLOUR_ASPHALT)
STN_STATION_WRAPPER_PLATFORM(asphalt_alt_1          , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT_ALT,1,0), s_platform_alt, GROUP_PLATFORM_RECOLOUR_ASPHALT)
STN_STATION_WRAPPER_PLATFORM(asphalt_alt_2          , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_ASPHALT_ALT,0,1), s_platform_alt, GROUP_PLATFORM_RECOLOUR_ASPHALT)

// brick platform_alternative
STN_STATION_WRAPPER_PLATFORM(brick_alt_both         , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK_ALT,1,1), s_platform_alt, GROUP_PLATFORM_RECOLOUR_BRICK)
STN_STATION_WRAPPER_PLATFORM(brick_alt_1            , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK_ALT,1,0), s_platform_alt, GROUP_PLATFORM_RECOLOUR_BRICK)
STN_STATION_WRAPPER_PLATFORM(brick_alt_2            , 0, STN_CALC_PLATFORM_BIT(ID_PLATFORM_BRICK_ALT,0,1), s_platform_alt, GROUP_PLATFORM_RECOLOUR_BRICK)

// crossing
STN_STATION_WRAPPER_CROSSING(cement_crs_both        , 0, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL,1,1), s_platform_cement_crossing)
STN_STATION_WRAPPER_CROSSING(cement_crs_1           , 0, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL,1,0), s_platform_cement_crossing)
STN_STATION_WRAPPER_CROSSING(cement_crs_2           , 0, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL,0,1), s_platform_cement_crossing)

// crossing as waypoint
STN_STATION_WRAPPER_CROSSING(wayp_cement_crs_both   , 1, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL_WAYP,1,1), s_platform_cement_crossing)
STN_STATION_WRAPPER_CROSSING(wayp_cement_crs_1      , 1, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL_WAYP,1,0), s_platform_cement_crossing)
STN_STATION_WRAPPER_CROSSING(wayp_cement_crs_2      , 1, STN_CALC_PLATFORM_BIT(ID_CROSSING_REAL_WAYP,0,1), s_platform_cement_crossing)

// overpass
STN_STATION_WRAPPER_OVERPASS(overpass_real_both     , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_REAL,1,1), s_platform_overpass_real)
STN_STATION_WRAPPER_OVERPASS(overpass_real_1        , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_REAL,1,0), s_platform_overpass_real)
STN_STATION_WRAPPER_OVERPASS(overpass_real_2        , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_REAL,0,1), s_platform_overpass_real)

STN_STATION_WRAPPER_OVERPASS(overpass_station_both     , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_STATION,1,1), s_overpass_station)
STN_STATION_WRAPPER_OVERPASS(overpass_station_1        , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_STATION,1,0), s_overpass_station)
STN_STATION_WRAPPER_OVERPASS(overpass_station_2        , 0, STN_CALC_PLATFORM_BIT(ID_OVERPASS_STATION,0,1), s_overpass_station)

// overhead
STN_STATION_WRAPPER_OVERHEAD(overhead_low_both      , 0, STN_CALC_PLATFORM_BIT(ID_MODULAR_LOW,1,1), s_modular_low_overpass)
STN_STATION_WRAPPER_OVERHEAD(overhead_low_1         , 0, STN_CALC_PLATFORM_BIT(ID_MODULAR_LOW,1,0), s_modular_low_overpass)
STN_STATION_WRAPPER_OVERHEAD(overhead_low_2         , 0, STN_CALC_PLATFORM_BIT(ID_MODULAR_LOW,0,1), s_modular_low_overpass)

// shelters
STN_STATION_WRAPPER_SHELTER (shelter_both           , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_TILES,1,1), s_shelter_tiles)
STN_STATION_WRAPPER_SHELTER (shelter_1              , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_TILES,1,0), s_shelter_tiles)
STN_STATION_WRAPPER_SHELTER (shelter_2              , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_TILES,0,1), s_shelter_tiles)

STN_STATION_WRAPPER_SHELTER (shelter_metal_both     , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_METAL,1,1), s_shelter_metal)
STN_STATION_WRAPPER_SHELTER (shelter_metal_1        , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_METAL,1,0), s_shelter_metal)
STN_STATION_WRAPPER_SHELTER (shelter_metal_2        , 0, STN_CALC_PLATFORM_BIT(ID_SHELTER_METAL,0,1), s_shelter_metal)

STN_STATION_WRAPPER_PLATFORM(blank                  , 0, 10000, s_platform_cement, GROUP_RECOLOUR_ERA)
STN_STATION_WRAPPER_PLATFORM(wayp_blank             , 1, 10001, s_platform_cement, GROUP_RECOLOUR_ERA)

// buffer stops
STN_STATION_WRAPPER_BUFFER(buffer                   , 2, STN_CALC_PLATFORM_BIT(ID_BUFFER,1,1), s_buffer_real)
STN_STATION_WRAPPER_BUFFER_SHELTER(buffer_shelter   , 2, STN_CALC_PLATFORM_BIT(ID_BUFFER_SHELTER_TILES,1,1), s_buffer_real, s_shelter_tiles)


#define STN_CLASSNAME_SETTER(class_label, class_name) \
item(FEAT_STATIONS, i_station_class_name) {\
    property {\
        class: class_label;\
        classname: class_name;\
        name: string(STR_GRF_NAME);\
    }\
    graphics { \
        availability: 0; \
    } \
}

STN_CLASSNAME_SETTER("WINS", string(STR_CLASS_STATIONS))
STN_CLASSNAME_SETTER(0x4E4957FF, string(STR_CLASS_WAYPOINTS))
