// spriteset (s_fences_and_underlay, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP) {
//
// }

template tmpl_fence (x, y, path) {
    [ x,      y,      32,      25,     -31,     -10, path]
    [ x+40,   y,      32,      25,       1,     -10, path]
}

template tmpl_fence_v2 (x, y, path) {
    [ x,      y,      48,      30,     -39,     -12, path]
    [ x+50,   y,      48,      30,      -8,     -12, path]
}

template tmpl_underlay (x, y, path) {
    [ x,      y,      48,      30,     -39,     -12, path]
    [ x+50,   y,      48,      30,      -8,     -12, path]
    [ x,      y+40,   48,      30,      -7,       3, path]
    [ x+50,   y+40,   48,      30,     -40,       4, path]
}

template tmpl_barrier(path){
    [0*16, 0, 16, 16, -8, -6, path]
    [1*16, 0, 16, 16, -9, -5, path]
    [2*16, 0, 16, 16, -5, -5, path]
    [3*16, 0, 16, 16, -9, -5, path]
}

spriteset (s_fences_and_underlay, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP,) {
    // fences
    tmpl_fence_v2(0, 80, "gfx/fences/fences_2_no_grass.png")
    tmpl_fence_v2(0, 160, "gfx/fences/fences_2_no_grass.png")
    tmpl_fence_v2(0, 240, "gfx/fences/fences_2_no_grass.png")
    tmpl_fence_v2(0, 320, "gfx/fences/fences_2_no_grass.png")
    tmpl_fence_v2(0, 400, "gfx/fences/fences_2_no_grass.png")
    tmpl_fence(0, 50, "gfx/fences/fences_symmetric.png")
    tmpl_fence(0, 100, "gfx/fences/fences_symmetric.png")
    // underlay
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_temp.png")
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_arctic.png") //TODO
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_trop.png")
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_desert.png") //TODO
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_temp.png") //TODO
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_arctic.png") //TODO
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_trop.png") //TODO
    tmpl_underlay(0, 0, "gfx/fences/fences_2_grass_desert.png") //TODO
    // barrier
    tmpl_barrier("gfx/barrier.png")
}

// fence parameters, from JP+ Tracks
const param_fence_offset = 26;
const param_fence_old = 0;
const param_fence_narrow_1 = 1;
const param_fence_narrow_2 = 2;
const param_fence_narrow_3 = 3;
const param_fence_standard_1 = 4;
const param_fence_standard_2 = 5;
const param_fence_standard_3 = 6;
const param_fence_shinkansen_1 = 7;
const param_fence_shinkansen_2 = 8;
const param_fence_ind = 9;

// fence types
const id_fence_hedge = 0;
const id_fence_wooden = 1;
const id_fence_wooden_white = 2;
const id_fence_mesh = 3;
const id_fence_mesh_low = 4;
const id_fence_concrete = 5;
const id_fence_concrete_2 = 6;
const pos_fence_end = (id_fence_concrete_2 + 1) * 2;

// underlay types
const pos_underlay_start = pos_fence_end;
const id_underlay_ogfx2_temperate = 0;
const id_underlay_ogfx2_arctic = 1;
const id_underlay_ogfx2_tropical = 2;
const id_underlay_ogfx2_desert = 3;
const id_underlay_ogfx_temperate = 4;
const id_underlay_ogfx_arctic = 5;
const id_underlay_ogfx_tropical = 6;
const id_underlay_ogfx_desert = 7;
const pos_underlay_end = pos_underlay_start + (id_underlay_ogfx_desert + 1) * 4;

// barrier types
const pos_barrier_start = pos_underlay_end;
const pos_barrier_end = pos_barrier_start + 4;

switch(FEAT_STATIONS, SELF, _sw_no_underlay, track_type){
    dBAE: 1;
    SBAI: 1;
    SCAE: 1;
    SCAN: 1;
    SCAA: 1;
    SHAA: 1;
    SBA3: 1;
    SCAD: 1;
    NCAA: 1;
    sCAD: 1;
    NCAE: 1;
    NDAN: 1;
    NCAD: 1;
    MGLV: 1;
    0;
}

// fences under tropical, temperate, and snowy climates
switch(FEAT_STATIONS, SELF, _sw_fence_query_railtype, track_type){
    // param_fence_old
    RAIL: LOAD_TEMP(param_fence_old);
    NAAN: LOAD_TEMP(param_fence_old);
    // param_fence_narrow_1
    NAAA: LOAD_TEMP(param_fence_narrow_1);
    NAAE: LOAD_TEMP(param_fence_narrow_1);
    NAAD: LOAD_TEMP(param_fence_narrow_1);
    NBAN: LOAD_TEMP(param_fence_narrow_1);
    // param_fence_narrow_2
    NBAE: LOAD_TEMP(param_fence_narrow_2);
    NBAA: LOAD_TEMP(param_fence_narrow_2);
    NCAN: LOAD_TEMP(param_fence_narrow_2);
    NBAD: LOAD_TEMP(param_fence_narrow_2);
    // param_fence_narrow_3
    NCAE: LOAD_TEMP(param_fence_narrow_3);
    NDAN: LOAD_TEMP(param_fence_narrow_3);
    NCAD: LOAD_TEMP(param_fence_narrow_3);
    NCAA: LOAD_TEMP(param_fence_narrow_3);
    // param_fence_standard_1
    dAAN: LOAD_TEMP(param_fence_standard_1);
    SAAA: LOAD_TEMP(param_fence_standard_1);
    ELRL: LOAD_TEMP(param_fence_standard_1);
    SAAN: LOAD_TEMP(param_fence_standard_1);
    SAAD: LOAD_TEMP(param_fence_standard_1);
    sAAD: LOAD_TEMP(param_fence_standard_1);
    // param_fence_standard_2
    SBAE: LOAD_TEMP(param_fence_standard_2);
    SBAN: LOAD_TEMP(param_fence_standard_2);
    SBAA: LOAD_TEMP(param_fence_standard_2);
    SAA3: LOAD_TEMP(param_fence_standard_2);
    SBAD: LOAD_TEMP(param_fence_standard_2);
    dAAE: LOAD_TEMP(param_fence_standard_2);
    sBAD: LOAD_TEMP(param_fence_standard_2);
    // param_fence_standard_3
    sCAD: LOAD_TEMP(param_fence_standard_3);
    SCAE: LOAD_TEMP(param_fence_standard_3);
    dBAE: LOAD_TEMP(param_fence_standard_3);
    SCAN: LOAD_TEMP(param_fence_standard_3);
    SBA3: LOAD_TEMP(param_fence_standard_3);
    SCAD: LOAD_TEMP(param_fence_standard_3);
    SCAA: LOAD_TEMP(param_fence_standard_3);
    // param_fence_shinkansen_1
    SGAA: LOAD_TEMP(param_fence_shinkansen_1);
    // param_fence_shinkansen_2
    SHAA: LOAD_TEMP(param_fence_shinkansen_2);
    // param_fence_ind
    SGAN: LOAD_TEMP(param_fence_ind);
    SGAE: LOAD_TEMP(param_fence_ind);
    SFAN: LOAD_TEMP(param_fence_ind);
    SFAE: LOAD_TEMP(param_fence_ind);
    SDAN: LOAD_TEMP(param_fence_ind);
    SDAE: LOAD_TEMP(param_fence_ind);
    SEAN: LOAD_TEMP(param_fence_ind);
    SEAE: LOAD_TEMP(param_fence_ind);
    NHAN: LOAD_TEMP(param_fence_ind);
    NHAE: LOAD_TEMP(param_fence_ind);
    NGAN: LOAD_TEMP(param_fence_ind);
    NGAE: LOAD_TEMP(param_fence_ind);
    NEAE: LOAD_TEMP(param_fence_ind);
    NEAN: LOAD_TEMP(param_fence_ind);
    NFAN: LOAD_TEMP(param_fence_ind);
    NFAE: LOAD_TEMP(param_fence_ind);
    default: param_fences_default;
}

switch(FEAT_STATIONS, SELF, _sw_fence, [
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_old], param_fence_old),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_1], param_fence_narrow_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_2], param_fence_narrow_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_narrow_3], param_fence_narrow_3),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_1], param_fence_standard_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_2], param_fence_standard_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_standard_3], param_fence_standard_3),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_shinkansen_1], param_fence_shinkansen_1),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_shinkansen_2], param_fence_shinkansen_2),
    STORE_TEMP(param["YZ\AA\02", param_fence_offset + param_fence_ind], param_fence_ind),
    _sw_fence_query_railtype(),
]){
    1: id_fence_hedge;
    2: id_fence_wooden;
    3: id_fence_wooden_white;
    4: id_fence_mesh;
    5: id_fence_mesh_low;
    6: id_fence_concrete;
    7: id_fence_concrete_2;
    none_code;
}

switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_temperate, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_temperate;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_arctic, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_arctic;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx2_tropical, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx2_desert;
    id_underlay_ogfx2_tropical;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_temperate, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_temperate;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_arctic, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_arctic;
}
switch(FEAT_STATIONS, SELF, _sw_underlay_ogfx_tropical, terrain_type){
    TILETYPE_SNOW: none_code;
    TILETYPE_DESERT: id_underlay_ogfx_desert;
    id_underlay_ogfx_tropical;
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx, climate){
    CLIMATE_ARCTIC: _sw_underlay_ogfx_arctic();
    CLIMATE_TROPICAL: _sw_underlay_ogfx_tropical();
    _sw_underlay_ogfx_temperate();
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx2_check_param, a, a){
    1: _sw_underlay_ogfx2_tropical();
    2: _sw_underlay_ogfx2_arctic();
    _sw_underlay_ogfx2_temperate();
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_ogfx2, climate){
    CLIMATE_ARCTIC:   _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]);
    CLIMATE_TROPICAL: _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]);
                      _sw_fence_underlay_ogfx2_check_param(param["\6f\67\66\78", 0]); // no toyland, sorrey!
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_automatic,
    grf_order_behind("\4f\47\2b\34") ? 1 : // OpenGFX+ Landscape
    grf_order_behind("\6f\67\66\78") ? 0 : // OpenGFX2
    grf_order_behind("\4f\47\46\58") ? 1 : // OpenGFX
    0
) {
    1: _sw_fence_underlay_ogfx();
    _sw_fence_underlay_ogfx2();
}

// check fence underlay
switch(FEAT_STATIONS, SELF, _sw_fence_underlay, param_fences_underlay) {
    1: _sw_fence_underlay_automatic();
    2:  param["YZ\AA\02", 25] == 0 ?
            none_code :
        param["YZ\AA\02", 24] == 0 ?
            _sw_underlay_ogfx2_temperate() :
            _sw_underlay_ogfx2_tropical();
    3: _sw_underlay_ogfx2_temperate();
    4: _sw_underlay_ogfx2_arctic();
    5: _sw_underlay_ogfx2_tropical();
    6: _sw_underlay_ogfx_temperate();
    7: _sw_underlay_ogfx_arctic();
    8: _sw_underlay_ogfx_tropical();
    none_code;
}

switch(FEAT_STATIONS, SELF, _sw_fence_underlay_check_tile_class, a, a){
    TILE_CLASS_RAIL: 1;
    TILE_CLASS_STATION: 1;
    0;
}

// Returns a 12 bit value representing the fence type and underlay type
// aaaaaaaa bbbb
// a: fence type
// b: nearby rail/station information
// returns none_code + extra bits if there are no underlay to show
// that is, 0b11111111 XXXX where XXXX doesn't matter
switch(FEAT_STATIONS, SELF, sw_fence_underlay,
    hasbit(rail_continuation, 1) << pos_front |
    hasbit(rail_continuation, 0) << pos_back |
    _sw_fence_underlay_check_tile_class(nearby_tile_class(0,  1)) << pos_right |
    _sw_fence_underlay_check_tile_class(nearby_tile_class(0, -1)) << pos_left |
    (_sw_no_underlay() && grf_future_status("YZ\AA\02") ? none_code : _sw_fence_underlay()) << pos_end
){return;}

// Returns a 12 bit value representing the fence type
// aaaaaaaa bbbb
// a: fence type
// b: nearby rail/station information
// returns none_code (0xFF) if there are no fence to show
switch(FEAT_STATIONS, SELF, sw_fence,
    _sw_fence_underlay_check_tile_class(nearby_tile_class(1,  0)) << pos_back |
    _sw_fence_underlay_check_tile_class(nearby_tile_class(-1, 0)) << pos_front |
    _sw_fence_underlay_check_tile_class(nearby_tile_class(0,  1)) << pos_right |
    _sw_fence_underlay_check_tile_class(nearby_tile_class(0, -1)) << pos_left |
    _sw_fence() << pos_end
){return;}

// Returns a 4 bit value
// aaaa
// a: nearby rail/station information
switch(FEAT_STATIONS, SELF, sw_barrier,
    hasbit(rail_continuation, 1) << pos_front |
    hasbit(rail_continuation, 0) << pos_back
){return;}
