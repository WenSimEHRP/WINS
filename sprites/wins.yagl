yagl_version: "v1.2.2-0-g679a0ca";
grf_format: Container2;
// Record #1
optional_info // Action14
{
    INFO: 
    {
        VRSN: [ 0x00 0x00 0x00 0x00 ];
        MINV: [ 0x00 0x00 0x00 0x00 ];
        NPAR: [ 0x00 ];
        PALS: [ 0x44 ];
        BLTR: [ 0x38 ];
    }
}
// Record #2
grf // Action08
{
    grf_id: "WS\x01\x01";
    version: GRF8;
    name: "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
    description: "{ext push-colour}{white}2024/06/02 23:39:08 PT{ext pop-colour}{new-line}{new-line}JP+ WINS Stations is a station set.";
}
// Record #3
set_parameter // Action0D
{
    target: 0x7F;
    operation: 0x00;
    source1: 0xFF;
    source2: 0x00;
    data_value: 0x00000000;
}
// Record #4
if_act9 (is_grf_disabled("ES\x05\x00", 0xFFFFFFFF)) // Action09
{
    skip_sprites: 0x01;
    // Or skip to the next label (Action10) with this value - search wraps at end of GRF.
    // 0x00 means skip to end of GRF file - may disable the GRF.
}
// Record #5
set_parameter // Action0D
{
    target: 0x7F;
    operation: 0x00;
    source1: 0xFF;
    source2: 0x00;
    data_value: 0x00000001;
}
// Record #6
if_act9 (is_not_equal(param[0x7F] & 0xFFFFFFFF, 0x00000001)) // Action09
{
    skip_sprites: 0x01;
    // Or skip to the next label (Action10) with this value - search wraps at end of GRF.
    // 0x00 means skip to end of GRF file - may disable the GRF.
}
// Record #7
error_message<Error, default, 0xFF> // Action0B <severity, language, message>
{
    message: "JP+ Station contains every station tile in {ext push-colour}{white}JapanSet3: Stations{ext pop-colour}. It is recommended to remove the GRF before using this set.";
}
// Record #8
switch<Stations, 0xFF, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x45] & 0x00000001;

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x45] >> 1 & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x7D, 0x9B] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #9
switch<Stations, 0xFE, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x68, 0x1F] & 0xFFFFFFFF;

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000007;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xF1] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x11] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000005;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xFF] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x10] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xF0] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x0F] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9F] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9E] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9D] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9C] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9B] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #10
switch<Stations, 0xFD, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x68, 0x0F] >> 11 & 0x00000001;

        value2 = variable[0x68, 0x01] >> 10 & 0x00000002;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0xF0] >> 9 & 0x00000004;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0x10] >> 8 & 0x00000008;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0xFF] >> 7 & 0x00000010;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0x11] >> 6 & 0x00000020;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0xF1] >> 5 & 0x00000040;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x68, 0x1F] >> 4 & 0x00000080;
        value1 = BitwiseOr(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #11
switch<Stations, 0xFC, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x68, 0x1F] >> 8 & 0x00000003;

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000007;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xF1] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x11] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000005;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xFF] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x10] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0xF0] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x01] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x68, 0x0F] >> 8 & 0x00000003;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9F] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9E] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9D] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9C] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x7D, 0x9B] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #12
switch<Stations, 0xFC, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x7E, 0xFF] & 0xFFFFFFFF;

        value2 = variable[0x1A] & 0x00000009;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000080;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000081;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x0F] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000082;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x0F] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000083;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000084;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x84] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x01] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000085;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x01] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x85] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000086;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000087;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x87] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0xF0] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000088;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x86] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0xF0] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x88] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000089;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x10] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x89] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x10] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8B] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8D] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0xFF] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0xFF] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8E] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000090;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x90] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x11] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000091;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8F] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x11] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x91] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000005;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000092;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000093;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x93] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0xF1] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000094;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x92] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0xF1] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x94] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000095;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000096;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x96] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x1F] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000097;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x95] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x1F] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x97] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000007;
        value1 = TempStore(value1, value2);

        value2 = variable[0x21] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x1E000000;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000098;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x00000099;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x99] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x68, 0x00] & 0x000000FF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000009A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x98] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x6B, 0x00] & 0x0000FFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x9A] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000008;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7E, 0xFE] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7E, 0xFD] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7E, 0xFC] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x67, 0x00] & 0x0000001F;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000D;
        value1 = TempStore(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #13
properties<Stations, 0x0012> // Action00
{
    // instance_id: 0x0012
    {
        class_id: "WINS";
        can_train_enter_tile: 0x00;
        pylon_placement: 0xFF;
        overhead_wire_placement: 0x00;
    }
}
// Record #14
strings<Stations, default, 0xC412*> // <feature, language, first_id> Action04, Default
{
    /* 0xC412 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #15
strings<Stations, default, 0xC512*> // <feature, language, first_id> Action04, Default
{
    /* 0xC512 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #16
sprite_sets<Stations, 0x0000> // <feature, first_set> Action01
{
    sprite_set // 0x0000
    {
        sprite_id<0x00000012>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 10];
        }
        sprite_id<0x00000013>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 10];
        }
        sprite_id<0x00000014>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 10];
        }
        sprite_id<0x00000015>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 10];
        }
        sprite_id<0x00000016>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 10];
        }
        sprite_id<0x00000017>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 10];
        }
        sprite_id<0x00000018>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 10];
        }
        sprite_id<0x00000019>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 10];
        }
        sprite_id<0x0000001A>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 10];
        }
        sprite_id<0x0000001B>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 92];
        }
        sprite_id<0x0000001C>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 92];
        }
        sprite_id<0x0000001D>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 92];
        }
        sprite_id<0x0000001E>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 92];
        }
        sprite_id<0x0000001F>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 92];
        }
        sprite_id<0x00000020>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 92];
        }
        sprite_id<0x00000021>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 92];
        }
        recolour_sprite
        {
            0x41: 0x08;
            0x42: 0x08;
        }
        recolour_sprite
        {
            0x41..0x42: 0x0C..0x0D;
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        sprite_id<0x0000002A>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 92];
        }
        sprite_id<0x0000002B>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 92];
        }
        sprite_id<0x0000002C>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 174];
        }
        sprite_id<0x0000002D>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 174];
        }
        sprite_id<0x0000002E>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 174];
        }
        sprite_id<0x0000002F>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 174];
        }
        sprite_id<0x00000030>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 174];
        }
        sprite_id<0x00000031>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 174];
        }
        sprite_id<0x00000032>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 174];
        }
        sprite_id<0x00000033>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 174];
        }
        sprite_id<0x00000034>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 174];
        }
        sprite_id<0x00000035>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 256];
        }
        sprite_id<0x00000036>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 256];
        }
        sprite_id<0x00000037>
        {
            [72, 72, -35, -37], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 256];
        }
        sprite_id<0x00000038>
        {
            [72, 72, -55, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 256];
        }
        sprite_id<0x00000039>
        {
            [72, 72, -15, -47], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 256];
        }
        recolour_sprite
        {
            0x40..0x41: 0x07..0x08;
            0x42: 0x08;
        }
        recolour_sprite
        {
            0x40..0x42: 0x0B..0x0D;
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
    }
}
// Record #17
sprite_groups<Stations, 0xFD> // Action02 basic
{
    secondary_spritesets: [ 0x0000 ];
}
// Record #18
sprite_sets<Stations, 0x0000> // <feature, first_set> Action01
{
    sprite_set // 0x0000
    {
        sprite_id<0x00000044>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 256];
        }
        sprite_id<0x00000045>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 256];
        }
        sprite_id<0x00000046>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 256];
        }
        sprite_id<0x00000047>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 256];
        }
        sprite_id<0x00000048>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 338];
        }
        sprite_id<0x00000049>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 338];
        }
        sprite_id<0x0000004A>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 338];
        }
        sprite_id<0x0000004B>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 338];
        }
        sprite_id<0x0000004C>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 338];
        }
        sprite_id<0x0000004D>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 338];
        }
        sprite_id<0x0000004E>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 338];
        }
        sprite_id<0x0000004F>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 338];
        }
        sprite_id<0x00000050>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 338];
        }
        sprite_id<0x00000051>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 420];
        }
        sprite_id<0x00000052>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 420];
        }
        sprite_id<0x00000053>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 420];
        }
        sprite_id<0x00000054>
        {
            [72, 72, -23, -43], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 420];
        }
        sprite_id<0x00000055>
        {
            [72, 72, -47, -43], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 420];
        }
        sprite_id<0x00000056>
        {
            [72, 72, -43, -53], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 420];
        }
        sprite_id<0x00000057>
        {
            [72, 72, -27, -53], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 420];
        }
        sprite_id<0x00000058>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 420];
        }
        sprite_id<0x00000059>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 420];
        }
        sprite_id<0x0000005A>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 502];
        }
        sprite_id<0x0000005B>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 502];
        }
        sprite_id<0x0000005C>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 502];
        }
        sprite_id<0x0000005D>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 502];
        }
        sprite_id<0x0000005E>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 502];
        }
        sprite_id<0x0000005F>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 502];
        }
        sprite_id<0x00000060>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 502];
        }
        sprite_id<0x00000061>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 502];
        }
        sprite_id<0x00000062>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 502];
        }
        sprite_id<0x00000063>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 584];
        }
        sprite_id<0x00000064>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 584];
        }
        sprite_id<0x00000065>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 584];
        }
        sprite_id<0x00000066>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 584];
        }
        sprite_id<0x00000067>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 584];
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
            0x0F: 0x0C;
            0x87: 0x85;
            0xD2: 0x9D;
            0xD4: 0xD5;
        }
        recolour_sprite
        {
            0x0F: 0x0E;
            0xD2: 0x9F;
            0xD4: 0xD3;
        }
        recolour_sprite
        {
            0x0F: 0x0C;
            0x87: 0x81;
            0xD2: 0xA1;
            0xD4: 0xD5;
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
    }
}
// Record #19
sprite_groups<Stations, 0xFE> // Action02 basic
{
    secondary_spritesets: [ 0x0000 ];
}
// Record #20
sprite_sets<Stations, 0x0000> // <feature, first_set> Action01
{
    sprite_set // 0x0000
    {
        sprite_id<0x00000072>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 584];
        }
        sprite_id<0x00000073>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 584];
        }
        sprite_id<0x00000074>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 584];
        }
        sprite_id<0x00000075>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 584];
        }
        sprite_id<0x00000076>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 666];
        }
        sprite_id<0x00000077>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 666];
        }
        sprite_id<0x00000078>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 666];
        }
        sprite_id<0x00000079>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 666];
        }
        sprite_id<0x0000007A>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 666];
        }
        sprite_id<0x0000007B>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 666];
        }
        sprite_id<0x0000007C>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 666];
        }
        sprite_id<0x0000007D>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 666];
        }
        sprite_id<0x0000007E>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 666];
        }
        sprite_id<0x0000007F>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 748];
        }
        sprite_id<0x00000080>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 748];
        }
        sprite_id<0x00000081>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 748];
        }
        sprite_id<0x00000082>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 748];
        }
        sprite_id<0x00000083>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 748];
        }
        sprite_id<0x00000084>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 748];
        }
        sprite_id<0x00000085>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 748];
        }
        sprite_id<0x00000086>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 748];
        }
        sprite_id<0x00000087>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 748];
        }
        sprite_id<0x00000088>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 830];
        }
        sprite_id<0x00000089>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [92, 830];
        }
        sprite_id<0x0000008A>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [174, 830];
        }
        sprite_id<0x0000008B>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [256, 830];
        }
        sprite_id<0x0000008C>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [338, 830];
        }
        sprite_id<0x0000008D>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [420, 830];
        }
        sprite_id<0x0000008E>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [502, 830];
        }
        sprite_id<0x0000008F>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [584, 830];
        }
        sprite_id<0x00000090>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [666, 830];
        }
        sprite_id<0x00000091>
        {
            [72, 72, 0, 0], normal, c8bpp | chunked, "wins-8bpp-normal-0.png", [10, 912];
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
        recolour_sprite
        {
        }
    }
}
// Record #21
sprite_groups<Stations, 0xFF> // Action02 basic
{
    secondary_spritesets: [ 0x0000 ];
}
// Record #22
properties<Stations, 0x0012> // Action00
{
    // instance_id: 0x0012
    {
        advanced_sprite_layout: [ 
        {
            ground_sprite<0x000003F4>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0x8B;
                    sprite_offset: 0x8A;
                    palette_offset: 0x90;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x92;
                    sprite_offset: 0x91;
                    palette_offset: 0x94;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x9B;
                    sprite_offset: 0x9A;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x00, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9D;
                    sprite_offset: 0x9C;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x0A, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9F;
                    sprite_offset: 0x9E;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x0A, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xA7;
                    sprite_offset: 0xA6;
                    palette_offset: 0xAC;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xAE;
                    sprite_offset: 0xAD;
                    palette_offset: 0xB0;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xB7;
                    sprite_offset: 0xB6;
                    sprite_var10: 0x04;
                }
            }
        } 
        {
            ground_sprite<0x000003F3>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xBF;
                    sprite_offset: 0xBE;
                    palette_offset: 0xC4;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xC6;
                    sprite_offset: 0xC5;
                    palette_offset: 0xC8;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xCF;
                    sprite_offset: 0xCE;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x00, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD1;
                    sprite_offset: 0xD0;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x0A, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD3;
                    sprite_offset: 0xD2;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x0A, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xDB;
                    sprite_offset: 0xDA;
                    palette_offset: 0xE0;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xE2;
                    sprite_offset: 0xE1;
                    palette_offset: 0xE4;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xEB;
                    sprite_offset: 0xEA;
                    sprite_var10: 0x04;
                }
            }
        } ];
    }
}
// Record #23
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x1A] & 0x00000002;

        value2 = variable[0x1A] & 0x00000080;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000081;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000082;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000083;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000084;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x84] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000085;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x85] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000086;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000087;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x87] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000088;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x88] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x86] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000089;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x89] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8D] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8E] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8F] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000090;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000091;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000092;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000C;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000093;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x93] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000094;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000095;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x95] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000096;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x96] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000097;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000098;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x98] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000099;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x99] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x97] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000009A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000011;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000013;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000A2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA3] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA4] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xA2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000A5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xA5] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000A6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000A7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xA9] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xA8] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xAA] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAB] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000AE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000D;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB1] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000B3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xB3] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000B7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000BA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBB] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBC] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xBA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000BD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xBD] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000BE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000BF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC1] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xC0] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xC2] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000A;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC7] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xC9] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000CB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xCC] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCD] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xCB] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000CE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000CF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000012;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000D6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD7] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD8] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xD6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000D9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xD9] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000DB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDD] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000DE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xDC] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xDE] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000B;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000E3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xE3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE5] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000E7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xE7] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000EA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000EB;
        value1 = TempStore(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #24
sprite_groups<Stations, 0xFA> // Action02 basic
{
    secondary_spritesets: [ 0x0000 ];
}
// Record #25
switch<Stations, 0xFA, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x0C] & 0x0000FFFF;
    };
    ranges:
    {
        0x00000000: 0x8000;
    };
    default: 0x00FA;
}
// Record #26
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x7E, 0xFC] & 0xFFFFFFFF;

        value2 = variable[0x7E, 0xFB] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x10] & 0x000000FF;
        value1 = Assign(value1, value2);
    };
    ranges:
    {
        0x00000001: 0x00FD;
        0x00000003: 0x00FE;
        0x00000004: 0x00FF;
    };
    default: 0x00FA;
}
// Record #27
feature_graphics<Stations> // Action03
{
    livery_override: false;
    default_set_id: 0x00FB;
    feature_ids: [ 0x0012 ];
    cargo_types:
    {
        // <cargo_type>: <cargo_id>;
    };
}
// Record #28
properties<Stations, 0x0010> // Action00
{
    // instance_id: 0x0010
    {
        class_id: "WINS";
        can_train_enter_tile: 0x00;
        pylon_placement: 0xFF;
        overhead_wire_placement: 0x00;
    }
}
// Record #29
strings<Stations, default, 0xC410*> // <feature, language, first_id> Action04, Default
{
    /* 0xC410 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #30
strings<Stations, default, 0xC510*> // <feature, language, first_id> Action04, Default
{
    /* 0xC510 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #31
properties<Stations, 0x0010> // Action00
{
    // instance_id: 0x0010
    {
        advanced_sprite_layout: [ 
        {
            ground_sprite<0x000003F4>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0x8B;
                    sprite_offset: 0x8A;
                    palette_offset: 0x90;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x92;
                    sprite_offset: 0x91;
                    palette_offset: 0x94;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x9B;
                    sprite_offset: 0x9A;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x00, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9D;
                    sprite_offset: 0x9C;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x0A, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9F;
                    sprite_offset: 0x9E;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x0A, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xA7;
                    sprite_offset: 0xA6;
                    palette_offset: 0xAC;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xAE;
                    sprite_offset: 0xAD;
                    palette_offset: 0xB0;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xB7;
                    sprite_offset: 0xB6;
                    sprite_var10: 0x04;
                }
            }
        } 
        {
            ground_sprite<0x000003F3>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xBF;
                    sprite_offset: 0xBE;
                    palette_offset: 0xC4;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xC6;
                    sprite_offset: 0xC5;
                    palette_offset: 0xC8;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xCF;
                    sprite_offset: 0xCE;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x00, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD1;
                    sprite_offset: 0xD0;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x0A, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD3;
                    sprite_offset: 0xD2;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x0A, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xDB;
                    sprite_offset: 0xDA;
                    palette_offset: 0xE0;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xE2;
                    sprite_offset: 0xE1;
                    palette_offset: 0xE4;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xEB;
                    sprite_offset: 0xEA;
                    sprite_var10: 0x04;
                }
            }
        } ];
    }
}
// Record #32
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x1A] & 0x00000000;

        value2 = variable[0x1A] & 0x00000080;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000081;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000082;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000083;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000084;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x84] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000085;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x85] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000086;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000087;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x87] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000088;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x88] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x86] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000089;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x89] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8D] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8E] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8F] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000090;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000091;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000092;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000C;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000093;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x93] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000094;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000095;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x95] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000096;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x96] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000097;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000098;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x98] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000099;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x99] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x97] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000009A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000011;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000013;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000A2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA3] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA4] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xA2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000A5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xA5] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000A6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000A7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xA9] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xA8] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xAA] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAB] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000AE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000D;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB1] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000B3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xB3] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000B7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000BA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBB] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBC] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xBA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000BD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xBD] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000BE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000BF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC1] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xC0] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xC2] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000A;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC7] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xC9] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000CB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xCC] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCD] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xCB] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000CE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000CF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000012;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000D6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD7] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD8] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xD6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000D9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xD9] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000DB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDD] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000DE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xDC] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xDE] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000B;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000E3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xE3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE5] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000E7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xE7] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000EA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000EB;
        value1 = TempStore(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #33
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x7E, 0xFC] & 0xFFFFFFFF;

        value2 = variable[0x7E, 0xFB] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x10] & 0x000000FF;
        value1 = Assign(value1, value2);
    };
    ranges:
    {
        0x00000001: 0x00FD;
        0x00000003: 0x00FE;
        0x00000004: 0x00FF;
    };
    default: 0x00FA;
}
// Record #34
feature_graphics<Stations> // Action03
{
    livery_override: false;
    default_set_id: 0x00FB;
    feature_ids: [ 0x0010 ];
    cargo_types:
    {
        // <cargo_type>: <cargo_id>;
    };
}
// Record #35
properties<Stations, 0x0011> // Action00
{
    // instance_id: 0x0011
    {
        class_id: "WINS";
        can_train_enter_tile: 0x00;
        pylon_placement: 0xFF;
        overhead_wire_placement: 0x00;
    }
}
// Record #36
strings<Stations, default, 0xC411*> // <feature, language, first_id> Action04, Default
{
    /* 0xC411 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #37
strings<Stations, default, 0xC511*> // <feature, language, first_id> Action04, Default
{
    /* 0xC511 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #38
properties<Stations, 0x0011> // Action00
{
    // instance_id: 0x0011
    {
        advanced_sprite_layout: [ 
        {
            ground_sprite<0x000003F4>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0x8B;
                    sprite_offset: 0x8A;
                    palette_offset: 0x90;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x92;
                    sprite_offset: 0x91;
                    palette_offset: 0x94;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x9B;
                    sprite_offset: 0x9A;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x00, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9D;
                    sprite_offset: 0x9C;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x0A, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9F;
                    sprite_offset: 0x9E;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x0A, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xA7;
                    sprite_offset: 0xA6;
                    palette_offset: 0xAC;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xAE;
                    sprite_offset: 0xAD;
                    palette_offset: 0xB0;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xB7;
                    sprite_offset: 0xB6;
                    sprite_var10: 0x04;
                }
            }
        } 
        {
            ground_sprite<0x000003F3>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xBF;
                    sprite_offset: 0xBE;
                    palette_offset: 0xC4;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xC6;
                    sprite_offset: 0xC5;
                    palette_offset: 0xC8;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xCF;
                    sprite_offset: 0xCE;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x00, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD1;
                    sprite_offset: 0xD0;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x0A, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD3;
                    sprite_offset: 0xD2;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x0A, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xDB;
                    sprite_offset: 0xDA;
                    palette_offset: 0xE0;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xE2;
                    sprite_offset: 0xE1;
                    palette_offset: 0xE4;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xEB;
                    sprite_offset: 0xEA;
                    sprite_var10: 0x04;
                }
            }
        } ];
    }
}
// Record #39
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x1A] & 0x00000001;

        value2 = variable[0x1A] & 0x00000080;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000081;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000082;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000083;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000084;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x84] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000085;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x85] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000086;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000087;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x87] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000088;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x88] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x86] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000089;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x89] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8D] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8E] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8F] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000090;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000091;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000092;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000C;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000093;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x93] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000094;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000095;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x95] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000096;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x96] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000097;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000098;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x98] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000099;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x99] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x97] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000009A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000011;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000013;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000A2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA3] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA4] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xA2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000A5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xA5] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000A6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000A7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xA9] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xA8] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xAA] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAB] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000AE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000D;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB1] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000B3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xB3] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000B7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000BA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBB] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBC] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xBA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000BD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xBD] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000BE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000BF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC1] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xC0] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xC2] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000A;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC7] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xC9] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000CB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xCC] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCD] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xCB] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000CE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000CF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000012;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000D6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD7] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD8] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xD6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000D9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xD9] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000DB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDD] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000DE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xDC] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xDE] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000B;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000E3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xE3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE5] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000E7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xE7] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000EA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000EB;
        value1 = TempStore(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #40
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x7E, 0xFC] & 0xFFFFFFFF;

        value2 = variable[0x7E, 0xFB] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x10] & 0x000000FF;
        value1 = Assign(value1, value2);
    };
    ranges:
    {
        0x00000001: 0x00FD;
        0x00000003: 0x00FE;
        0x00000004: 0x00FF;
    };
    default: 0x00FA;
}
// Record #41
feature_graphics<Stations> // Action03
{
    livery_override: false;
    default_set_id: 0x00FB;
    feature_ids: [ 0x0011 ];
    cargo_types:
    {
        // <cargo_type>: <cargo_id>;
    };
}
// Record #42
properties<Stations, 0x0015> // Action00
{
    // instance_id: 0x0015
    {
        class_id: "WINS";
        can_train_enter_tile: 0x00;
        pylon_placement: 0xFF;
        overhead_wire_placement: 0x00;
    }
}
// Record #43
strings<Stations, default, 0xC415*> // <feature, language, first_id> Action04, Default
{
    /* 0xC415 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #44
strings<Stations, default, 0xC515*> // <feature, language, first_id> Action04, Default
{
    /* 0xC515 */ "JP+ WINS Stations {ext push-colour}{white}0.1{ext pop-colour}";
}
// Record #45
properties<Stations, 0x0015> // Action00
{
    // instance_id: 0x0015
    {
        advanced_sprite_layout: [ 
        {
            ground_sprite<0x000003F4>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0x8B;
                    sprite_offset: 0x8A;
                    palette_offset: 0x90;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x92;
                    sprite_offset: 0x91;
                    palette_offset: 0x94;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0x9B;
                    sprite_offset: 0x9A;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x00, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9D;
                    sprite_offset: 0x9C;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x0A, 0x06, 0x00;
                extent: 0x06, 0x04, 0x06;
                registers: 
                {
                    hide_sprite: 0x9F;
                    sprite_offset: 0x9E;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x0A, 0x00;
                extent: 0x10, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xA7;
                    sprite_offset: 0xA6;
                    palette_offset: 0xAC;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xAE;
                    sprite_offset: 0xAD;
                    palette_offset: 0xB0;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xB7;
                    sprite_offset: 0xB6;
                    sprite_var10: 0x04;
                }
            }
        } 
        {
            ground_sprite<0x000003F3>
            {
            }
            building_sprite<0x842D842D>
            {
                offset: 0x00, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xBF;
                    sprite_offset: 0xBE;
                    palette_offset: 0xC4;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xC6;
                    sprite_offset: 0xC5;
                    palette_offset: 0xC8;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xCF;
                    sprite_offset: 0xCE;
                    sprite_var10: 0x04;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x00, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD1;
                    sprite_offset: 0xD0;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x8000042D>
            {
                offset: 0x06, 0x0A, 0x00;
                extent: 0x04, 0x06, 0x06;
                registers: 
                {
                    hide_sprite: 0xD3;
                    sprite_offset: 0xD2;
                    sprite_var10: 0x03;
                }
            }
            building_sprite<0x842D842D>
            {
                offset: 0x0A, 0x00, 0x00;
                extent: 0x06, 0x10, 0x06;
                registers: 
                {
                    hide_sprite: 0xDB;
                    sprite_offset: 0xDA;
                    palette_offset: 0xE0;
                    palette_act01: true;
                    sprite_var10: 0x01;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x842D842D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xE2;
                    sprite_offset: 0xE1;
                    palette_offset: 0xE4;
                    palette_act01: true;
                    sprite_var10: 0x03;
                    palette_var10: 0x01;
                }
            }
            child_sprite<0x8000042D>
            {
                offset: 0x00, 0x00;
                registers: 
                {
                    hide_sprite: 0xEB;
                    sprite_offset: 0xEA;
                    sprite_var10: 0x04;
                }
            }
        } ];
    }
}
// Record #46
switch<Stations, 0xFB, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x1A] & 0x00000005;

        value2 = variable[0x1A] & 0x00000080;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000081;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000005;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000082;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000083;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000084;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x84] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000085;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x85] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000086;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000087;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x87] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000088;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x88] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x86] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000089;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x89] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x0000008B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000008D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8D] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000008E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x8C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0x8E] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x0000008F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x8F] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000090;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000091;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000092;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000C;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000093;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0x93] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000094;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000095;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x95] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000096;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x96] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000097;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000098;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0x98] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000099;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0x99] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0x97] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x0000009A;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009B;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000011;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009C;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009D;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000013;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000009E;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x0000009F;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA0] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA1] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000A2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA3] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000A4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xA4] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xA2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000A5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xA5] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000A6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000A7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000A9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xA9] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xA8] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xAA] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAB] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000AD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000AE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000D;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000AF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x80] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xAF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB1] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB2] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000B3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xB4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xB3] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000B6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x81] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000B7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000B9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xB9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000BA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBB] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000BC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xBC] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xBA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000BD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xBD] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000BE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000BF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000C1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC1] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xC0] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xC2] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000A;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000C7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xC7] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000C8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000C9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xC9] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCA] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000CB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xCC] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000CD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xCD] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xCB] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000CE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000CF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000012;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000000D2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x09] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000D3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD4] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD5] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000D6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000F;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD7] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000D8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xD8] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xD6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000D9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xD9] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x000000DB;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000AE0F9;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DC;
        value1 = TempStore(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000DD;
        value1 = TempStore(value1, value2);

        value2 = variable[0x23] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x000B117C;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = SignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000002;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDD] & 0xFFFFFFFF;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000DE;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0xDC] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000000;
        value1 = Multiply(value1, value2);

        value2 = variable[0x7D, 0xDE] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000DF;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000010;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xDF] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E0;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E1;
        value1 = TempStore(value1, value2);

        value2 = variable[0x42] & 0x000000FF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedCmp(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E2;
        value1 = TempStore(value1, value2);

        value2 = variable[0x5F] >> 24 & 0x0000000F % 0x00000004;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x0000000B;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = SignedMod(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x000000E3;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x82] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = SignedDiv(value1, value2);

        value2 = variable[0x1A] & 0x00000006;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000009;
        value1 = Addition(value1, value2);

        value2 = variable[0x7D, 0xE3] & 0xFFFFFFFF;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000E4;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E5;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x00] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE5] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E6;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE6] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x000000E7;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0C] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E8;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x01] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x7D, 0xE8] & 0xFFFFFFFF;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x000000E9;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x0A] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedShiftRight(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseAnd(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = UnsignedMin(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x7D, 0xE9] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = ShiftLeft(value1, value2);

        value2 = variable[0x7D, 0xE7] & 0xFFFFFFFF;
        value1 = BitwiseOr(value1, value2);

        value2 = variable[0x1A] & 0x00000004;
        value1 = Multiply(value1, value2);

        value2 = variable[0x1A] & 0x00000003;
        value1 = Addition(value1, value2);

        value2 = variable[0x1A] & 0x000000EA;
        value1 = TempStore(value1, value2);

        value2 = variable[0x7D, 0x83] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x1A] & 0x00000001;
        value1 = BitwiseXor(value1, value2);

        value2 = variable[0x1A] & 0x000000EB;
        value1 = TempStore(value1, value2);
    };
    ranges:
    {
    };
    default: 0x8000;
}
// Record #47
switch<Stations, 0xFA, PrimaryDWord> // Action02 variable
{
    expression:
    {
        value1 = variable[0x7E, 0xFC] & 0xFFFFFFFF;

        value2 = variable[0x7E, 0xFB] & 0xFFFFFFFF;
        value1 = Assign(value1, value2);

        value2 = variable[0x10] & 0x000000FF;
        value1 = Assign(value1, value2);
    };
    ranges:
    {
        0x00000001: 0x00FD;
        0x00000003: 0x00FE;
        0x00000004: 0x00FF;
    };
    default: 0x00FA;
}
// Record #48
feature_graphics<Stations> // Action03
{
    livery_override: false;
    default_set_id: 0x00FA;
    feature_ids: [ 0x0015 ];
    cargo_types:
    {
        // <cargo_type>: <cargo_id>;
    };
}
